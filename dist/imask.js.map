{"version":3,"file":"imask.js","sources":["utils.js","masks/base.js","masks/regexp.js","masks/func.js","masks/pattern.js","imask.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n","import {conform} from '../utils';\r\n\r\n\r\nexport default\r\nclass BaseMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.mask = opts.mask;\r\n\r\n    this._listeners = {};\r\n    this._refreshingCount = 0;\r\n\r\n    this.saveState = this.saveState.bind(this);\r\n    this.processInput = this.processInput.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveState);\r\n    this.el.addEventListener('input', this.processInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this.saveState);\r\n    this.el.removeEventListener('input', this.processInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    this.el.setSelectionRange(pos, pos);\r\n  }\r\n\r\n  saveState (ev) {\r\n    this._oldValue = this.rawValue;\r\n    this._oldSelection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    }\r\n  }\r\n\r\n  processInput (ev) {\r\n     var inputValue = this.rawValue;\r\n\r\n    // use selectionEnd for handle Undo\r\n    var cursorPos = this.cursorPos;\r\n    var details = {\r\n      oldSelection: this._oldSelection,\r\n      cursorPos: cursorPos,\r\n      oldValue: this._oldValue\r\n    };\r\n\r\n    var res = inputValue;\r\n    res = conform(this.resolve(res, details),\r\n      res,\r\n      this._oldValue);\r\n\r\n    if (res !== inputValue) {\r\n      ++this._refreshingCount;\r\n      this.rawValue = res;\r\n      --this._refreshingCount;\r\n      cursorPos = details.cursorPos;\r\n\r\n      this.cursorPos = cursorPos;\r\n      // also queue change cursor for some browsers\r\n      setTimeout(() => this.cursorPos = cursorPos, 0);\r\n    }\r\n\r\n    if (res !== this._oldValue) this.fireEvent(\"accept\");\r\n    return res;\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    var listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  // override this\r\n  resolve (str, details) { return str; }\r\n\r\n  get rawValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    this.startRefresh();\r\n    this.el.value = str;\r\n    this.endRefresh();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.rawValue;\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.rawValue = value;\r\n  }\r\n\r\n  refresh () {\r\n    if (this._refreshingCount) return;\r\n    ++this._refreshingCount;\r\n\r\n    var str = this.rawValue;\r\n    // use unmasked value if value was not changed to update with options correctly\r\n    if (this._oldRawValue === str) str = this._oldUnmaskedValue;\r\n    delete this._oldRawValue;\r\n    delete this._oldUnmaskedValue;\r\n\r\n    var details = {\r\n      cursorPos: str.length,\r\n      startChangePos: 0,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: str.length\r\n      },\r\n      removedCount: str.length,\r\n      insertedCount: str.length,\r\n      oldValue: str\r\n    };\r\n    this.rawValue = conform(this.resolve(str, details), str);\r\n\r\n    --this._refreshingCount;\r\n  }\r\n\r\n  startRefresh () {\r\n    // store unmasked value to apply after changes\r\n    if (!this._refreshingCount) {\r\n      this._oldUnmaskedValue = this.unmaskedValue;\r\n      this._oldRawValue = this.rawValue;\r\n    }\r\n    ++this._refreshingCount;\r\n  }\r\n\r\n  endRefresh () {\r\n    --this._refreshingCount;\r\n    if (!this._refreshingCount) this.refresh();\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass RegExpMask extends BaseMask {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass FuncMask extends BaseMask {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import {conform} from '../utils';\r\nimport BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass PatternMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n    this.startRefresh();\r\n\r\n    this.placeholder = opts.placeholder;\r\n    this.definitions = {\r\n      ...PatternMask.DEFINITIONS,\r\n      ...opts.definitions\r\n    };\r\n\r\n    this._hollows = [];\r\n    this._buildResolvers();\r\n\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n\r\n    this.endRefresh();\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    ['click', 'focus'].forEach(ev =>\r\n      this.el.addEventListener(ev, this._alignCursor));\r\n  }\r\n\r\n  unbindEvents () {\r\n    super.unbindEvents();\r\n    ['click', 'focus'].forEach(ev =>\r\n      this.el.removeEventListener(ev, this._alignCursor));\r\n  }\r\n\r\n  _buildResolvers () {\r\n    this._charDefs = [];\r\n    var pattern = this.mask;\r\n\r\n    if (!pattern || !this.definitions) return;\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in this.definitions ?\r\n        PatternMask.DEF_TYPES.INPUT :\r\n        PatternMask.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternMask.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternMask.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\\\\') {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternMask.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._resolvers = {};\r\n    for (var defKey in this.definitions) {\r\n      this._resolvers[defKey] = IMask.MaskFactory(this.el, {\r\n        mask: this.definitions[defKey]\r\n      });\r\n    }\r\n  }\r\n\r\n  _tryAppendTail (str, tail) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(str.length); ci < tail.length; ++di) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      // failed\r\n      if (!def) return;\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, di, str) || '';\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n          ++ci;\r\n        } else {\r\n          if (!def.optional) chres = this._placeholder.char;\r\n          hollows.push(di);\r\n        }\r\n        str += placeholderBuffer + chres;\r\n        placeholderBuffer = '';\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n      }\r\n    }\r\n\r\n    return [str, hollows];\r\n  }\r\n\r\n  _extractInput (str, fromPos=0) {\r\n    var input = '';\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(fromPos); ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _isHollow (defIndex) {\r\n    return this._hollows.indexOf(defIndex) >= 0;\r\n  }\r\n\r\n  _isHiddenHollow (defIndex) {\r\n    return this._isHollow(defIndex) &&\r\n      this._charDefs[defIndex] && this._charDefs[defIndex].optional;\r\n  }\r\n\r\n  _hollowsBefore (defIndex) {\r\n    return this._hollows.filter(h => h < defIndex && this._isHiddenHollow(h));\r\n  }\r\n\r\n  _mapDefIndexToPos (defIndex) {\r\n    return defIndex - this._hollowsBefore(defIndex).length;\r\n  }\r\n\r\n  _mapPosToDefIndex (pos) {\r\n    var lastHollowIndex = pos;\r\n    // extend contiguous\r\n    while (this._isHiddenHollow(lastHollowIndex-1)) ++lastHollowIndex;\r\n\r\n    return pos + this._hollowsBefore(lastHollowIndex).length;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var res = head;\r\n    var hollows = this._hollows.slice();\r\n    var placeholderBuffer = '';\r\n    var insertSteps = [[res, hollows.slice()]];\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(head.length); ci<inserted.length;) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      var ch = inserted[ci];\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, ci, res) || '';\r\n        // if ok - next di\r\n        if (chres) {\r\n          res += placeholderBuffer + conform(chres, ch); placeholderBuffer = '';\r\n          insertSteps.push([res, hollows.slice()]);\r\n        } else if (def.optional) {\r\n          if (hollows.indexOf(di) < 0) hollows.push(di);\r\n        }\r\n        if (chres || def.optional) ++di;\r\n        if (chres || !def.optional) ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n    }\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    var cursorPos = details.cursorPos;\r\n    var oldSelection = details.oldSelection;\r\n    var oldValue = details.oldValue;\r\n    var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n    // Math.max for opposite operation\r\n    var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n      // for Delete\r\n      oldValue.length - str.length, 0);\r\n    var insertedCount = cursorPos - startChangePos;\r\n\r\n\r\n    var head = str.substring(0, startChangePos);\r\n    var tail = str.substring(startChangePos + insertedCount);\r\n    var inserted = str.substr(startChangePos, insertedCount);\r\n\r\n    var tailInput = this._extractInput(tail, startChangePos + removedCount);\r\n\r\n    // remove hollows after cursor\r\n    var lastHollowIndex = this._mapPosToDefIndex(startChangePos);\r\n    this._hollows = this._hollows.filter(h => h < lastHollowIndex);\r\n\r\n    var res = head;\r\n\r\n    // insert available\r\n    var insertSteps = this._generateInsertSteps(head, inserted);\r\n    for (var istep=insertSteps.length-1; istep >= 0; --istep) {\r\n      var step;\r\n      [step, this._hollows] = insertSteps[istep];\r\n      var result = this._tryAppendTail(step, tailInput);\r\n      if (result) {\r\n        [res, this._hollows] = result;\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (inserted) {\r\n      // append fixed at end\r\n      var appended = this._appendFixedEnd(res);\r\n      cursorPos += appended.length - res.length;\r\n      res = appended;\r\n    }\r\n\r\n    // remove head fixed and hollows if removed at end\r\n    if (!inserted && cursorPos === res.length) {\r\n      var di = this._mapPosToDefIndex(cursorPos-1);\r\n      var hasHollows = false;\r\n      for (; di > 0; --di) {\r\n        var def = this._charDefs[di];\r\n        if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n          if (this._isHollow(di)) hasHollows = true;\r\n          else break;\r\n        }\r\n      }\r\n      if (hasHollows) res = res.slice(0, di + 1);\r\n    }\r\n\r\n    // append placeholder\r\n    res = this._appendPlaceholderEnd(res);\r\n    details.cursorPos = cursorPos;\r\n\r\n    return res;\r\n  }\r\n\r\n  processInput (ev) {\r\n    var res = super.processInput(ev);\r\n    if (res !== this._oldValue && this.isComplete) this.fireEvent(\"complete\");\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.filter((def, di) =>\r\n      def.type === PatternMask.DEF_TYPES.INPUT && !def.optional &&\r\n      this._isHollow(di) >= 0).length;\r\n  }\r\n\r\n  _appendFixedEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length);; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      if (di >= res.length) res += def.char;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _appendPlaceholderEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length); di<this._charDefs.length; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) {\r\n        this._hollows.push(di);\r\n      }\r\n      if (this._placeholder.show === 'always') {\r\n        res += def.type === PatternMask.DEF_TYPES.FIXED ?\r\n          def.char :\r\n          !def.optional ?\r\n            this._placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    var str = this.rawValue;\r\n    var unmasked = '';\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.unmasking && !this._isHollow(di) &&\r\n        (def.type === PatternMask.DEF_TYPES.INPUT && this._resolvers[def.char].resolve(ch, ci, str) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n      ++ci;\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this.startRefresh();\r\n\r\n    var res = '';\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length;) {\r\n      var def = this._charDefs[di];\r\n      var ch = str[ci];\r\n\r\n      var chres = '';\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        if (this._resolvers[def.char].resolve(ch, ci, res)) {\r\n          chres = ch;\r\n          ++di;\r\n        }\r\n        ++ci;\r\n      } else {\r\n        chres = def.char;\r\n        if (def.unmasking && def.char === ch) ++ci;\r\n        ++di;\r\n      }\r\n      res += chres;\r\n    }\r\n    this._hollows.length = 0;\r\n    this.rawValue = res;\r\n\r\n    this.endRefresh();\r\n  }\r\n\r\n  get placeholder () { return this._placeholder; }\r\n\r\n  set placeholder (ph) {\r\n    this.startRefresh();\r\n    this._placeholder = {\r\n      ...PatternMask.DEFAULT_PLACEHOLDER,\r\n      ...ph\r\n    };\r\n    this.endRefresh();\r\n  }\r\n\r\n  get placeholderLabel () {\r\n    return this._charDefs.map(def =>\r\n      def.type === PatternMask.DEF_TYPES.FIXED ?\r\n        def.char :\r\n        !def.optional ?\r\n          this._placeholder.char :\r\n          '').join('');\r\n  }\r\n\r\n  get definitions () { return this._definitions; }\r\n\r\n  set definitions (defs) {\r\n    this.startRefresh();\r\n    this._definitions = defs;\r\n    this._buildResolvers();\r\n    this.endRefresh();\r\n  }\r\n\r\n  get mask () { return this._mask; }\r\n\r\n  set mask (mask) {\r\n    var initialized = this._mask;\r\n    if (initialized) this.startRefresh();\r\n    this._mask = mask;\r\n    if (initialized) {\r\n      this._buildResolvers();\r\n      this.endRefresh();\r\n    }\r\n  }\r\n\r\n  _alignCursor () {\r\n    var cursorPos = this.el.selectionEnd;\r\n    var cursorDefIndex = this._mapPosToDefIndex(cursorPos);\r\n    for (var rPos = cursorDefIndex; rPos >= 0; --rPos) {\r\n      var rDef = this._charDefs[rPos];\r\n      var lPos = rPos-1;\r\n      var lDef = this._charDefs[lPos];\r\n      if (this._isHiddenHollow(lPos)) continue;\r\n\r\n      if ((!rDef || rDef.type === PatternMask.DEF_TYPES.INPUT && this._isHollow(rPos) && !this._isHiddenHollow(rPos)) &&\r\n        !this._isHollow(lPos)) {\r\n        cursorDefIndex = rPos;\r\n        if (!lDef || lDef.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      }\r\n    }\r\n    cursorPos = this._mapDefIndexToPos(cursorDefIndex);\r\n    this.el.setSelectionRange(cursorPos, cursorPos);\r\n  }\r\n}\r\nPatternMask.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternMask.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternMask.DEFAULT_PLACEHOLDER = {\r\n  show: 'lazy',\r\n  char: '_'\r\n};\r\n","import {isString} from './utils';\r\n\r\nimport BaseMask from './masks/base';\r\nimport RegExpMask from './masks/regexp';\r\nimport FuncMask from './masks/func';\r\nimport PatternMask from './masks/pattern';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n  var mask = IMask.MaskFactory(el, opts);\r\n  mask.bindEvents();\r\n  // refresh\r\n  mask.rawValue = el.value;\r\n  return mask;\r\n}\r\n\r\nIMask.MaskFactory = function (el, opts) {\r\n  var mask = opts.mask;\r\n  if (mask instanceof BaseMask) return mask;\r\n  if (mask instanceof RegExp) return new RegExpMask(el, opts);\r\n  if (mask instanceof Function) return new FuncMask(el, opts);\r\n  if (isString(mask)) return new PatternMask(el, opts);\r\n  return new BaseMask(el, opts);\r\n}\r\nIMask.BaseMask = BaseMask;\r\nIMask.FuncMask = FuncMask;\r\nIMask.RegExpMask = RegExpMask;\r\nIMask.PatternMask = PatternMask;\r\nwindow.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","BaseMask","el","opts","mask","_listeners","_refreshingCount","saveState","bind","processInput","_onDrop","addEventListener","removeEventListener","unbindEvents","length","ev","_oldValue","rawValue","_oldSelection","selectionStart","cursorPos","inputValue","details","resolve","fireEvent","handler","push","hIndex","indexOf","splice","listeners","forEach","l","_oldRawValue","_oldUnmaskedValue","unmaskedValue","refresh","preventDefault","stopPropagation","selectionEnd","pos","setSelectionRange","value","startRefresh","endRefresh","RegExpMask","test","FuncMask","PatternMask","placeholder","definitions","DEFINITIONS","_hollows","_buildResolvers","_alignCursor","_charDefs","pattern","unmaskingBlock","optionalBlock","i","ch","type","DEF_TYPES","INPUT","FIXED","unmasking","optional","_resolvers","defKey","IMask","MaskFactory","tail","placeholderBuffer","hollows","slice","ci","di","_mapPosToDefIndex","def","resolver","char","chres","_placeholder","fromPos","input","_isHiddenHollow","_isHollow","defIndex","filter","h","_hollowsBefore","lastHollowIndex","head","inserted","insertSteps","oldSelection","oldValue","startChangePos","Math","min","start","removedCount","max","end","insertedCount","substring","substr","tailInput","_extractInput","_generateInsertSteps","istep","step","result","_tryAppendTail","appended","_appendFixedEnd","hasHollows","_appendPlaceholderEnd","isComplete","show","cursorDefIndex","rPos","rDef","lPos","lDef","_mapDefIndexToPos","unmasked","ph","DEFAULT_PLACEHOLDER","map","join","_definitions","defs","_mask","initialized","bindEvents","RegExp","Function","window"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkM6L1Byb2plY3RzL2ltYXNranMvc3JjL3V0aWxzLmpzIiwiQzovUHJvamVjdHMvaW1hc2tqcy9zcmMvbWFza3MvYmFzZS5qcyIsIkM6L1Byb2plY3RzL2ltYXNranMvc3JjL21hc2tzL3JlZ2V4cC5qcyIsIkM6L1Byb2plY3RzL2ltYXNranMvc3JjL21hc2tzL2Z1bmMuanMiLCJDOi9Qcm9qZWN0cy9pbWFza2pzL3NyYy9tYXNrcy9wYXR0ZXJuLmpzIiwiQzovUHJvamVjdHMvaW1hc2tqcy9zcmMvaW1hc2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0XHJcbmZ1bmN0aW9uIGlzU3RyaW5nIChzdHIpIHtcclxuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnRcclxuZnVuY3Rpb24gY29uZm9ybSAocmVzLCBzdHIsIGZhbGxiYWNrPScnKSB7XHJcbiAgcmV0dXJuIGlzU3RyaW5nKHJlcykgP1xyXG4gICAgcmVzIDpcclxuICAgIHJlcyA/XHJcbiAgICAgIHN0ciA6XHJcbiAgICAgIGZhbGxiYWNrO1xyXG59XHJcbiIsImltcG9ydCB7Y29uZm9ybX0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIEJhc2VNYXNrIHtcclxuICBjb25zdHJ1Y3RvciAoZWwsIG9wdHMpIHtcclxuICAgIHRoaXMuZWwgPSBlbDtcclxuICAgIHRoaXMubWFzayA9IG9wdHMubWFzaztcclxuXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxuICAgIHRoaXMuX3JlZnJlc2hpbmdDb3VudCA9IDA7XHJcblxyXG4gICAgdGhpcy5zYXZlU3RhdGUgPSB0aGlzLnNhdmVTdGF0ZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5wcm9jZXNzSW5wdXQgPSB0aGlzLnByb2Nlc3NJbnB1dC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fb25Ecm9wID0gdGhpcy5fb25Ecm9wLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBiaW5kRXZlbnRzICgpIHtcclxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuc2F2ZVN0YXRlKTtcclxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLnByb2Nlc3NJbnB1dCk7XHJcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLl9vbkRyb3ApO1xyXG4gIH1cclxuXHJcbiAgdW5iaW5kRXZlbnRzICgpIHtcclxuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuc2F2ZVN0YXRlKTtcclxuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLnByb2Nlc3NJbnB1dCk7XHJcbiAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLl9vbkRyb3ApO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveSAoKSB7XHJcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xyXG4gICAgdGhpcy5fbGlzdGVuZXJzLmxlbmd0aCA9IDA7XHJcbiAgfVxyXG5cclxuICBnZXQgc2VsZWN0aW9uU3RhcnQgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWwuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgfVxyXG5cclxuICBnZXQgY3Vyc29yUG9zICgpIHtcclxuICAgIHJldHVybiB0aGlzLmVsLnNlbGVjdGlvbkVuZDtcclxuICB9XHJcblxyXG4gIHNldCBjdXJzb3JQb3MgKHBvcykge1xyXG4gICAgdGhpcy5lbC5zZXRTZWxlY3Rpb25SYW5nZShwb3MsIHBvcyk7XHJcbiAgfVxyXG5cclxuICBzYXZlU3RhdGUgKGV2KSB7XHJcbiAgICB0aGlzLl9vbGRWYWx1ZSA9IHRoaXMucmF3VmFsdWU7XHJcbiAgICB0aGlzLl9vbGRTZWxlY3Rpb24gPSB7XHJcbiAgICAgIHN0YXJ0OiB0aGlzLnNlbGVjdGlvblN0YXJ0LFxyXG4gICAgICBlbmQ6IHRoaXMuY3Vyc29yUG9zXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzSW5wdXQgKGV2KSB7XHJcbiAgICAgdmFyIGlucHV0VmFsdWUgPSB0aGlzLnJhd1ZhbHVlO1xyXG5cclxuICAgIC8vIHVzZSBzZWxlY3Rpb25FbmQgZm9yIGhhbmRsZSBVbmRvXHJcbiAgICB2YXIgY3Vyc29yUG9zID0gdGhpcy5jdXJzb3JQb3M7XHJcbiAgICB2YXIgZGV0YWlscyA9IHtcclxuICAgICAgb2xkU2VsZWN0aW9uOiB0aGlzLl9vbGRTZWxlY3Rpb24sXHJcbiAgICAgIGN1cnNvclBvczogY3Vyc29yUG9zLFxyXG4gICAgICBvbGRWYWx1ZTogdGhpcy5fb2xkVmFsdWVcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHJlcyA9IGlucHV0VmFsdWU7XHJcbiAgICByZXMgPSBjb25mb3JtKHRoaXMucmVzb2x2ZShyZXMsIGRldGFpbHMpLFxyXG4gICAgICByZXMsXHJcbiAgICAgIHRoaXMuX29sZFZhbHVlKTtcclxuXHJcbiAgICBpZiAocmVzICE9PSBpbnB1dFZhbHVlKSB7XHJcbiAgICAgICsrdGhpcy5fcmVmcmVzaGluZ0NvdW50O1xyXG4gICAgICB0aGlzLnJhd1ZhbHVlID0gcmVzO1xyXG4gICAgICAtLXRoaXMuX3JlZnJlc2hpbmdDb3VudDtcclxuICAgICAgY3Vyc29yUG9zID0gZGV0YWlscy5jdXJzb3JQb3M7XHJcblxyXG4gICAgICB0aGlzLmN1cnNvclBvcyA9IGN1cnNvclBvcztcclxuICAgICAgLy8gYWxzbyBxdWV1ZSBjaGFuZ2UgY3Vyc29yIGZvciBzb21lIGJyb3dzZXJzXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jdXJzb3JQb3MgPSBjdXJzb3JQb3MsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXMgIT09IHRoaXMuX29sZFZhbHVlKSB0aGlzLmZpcmVFdmVudChcImFjY2VwdFwiKTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBvbiAoZXYsIGhhbmRsZXIpIHtcclxuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzW2V2XSkgdGhpcy5fbGlzdGVuZXJzW2V2XSA9IFtdO1xyXG4gICAgdGhpcy5fbGlzdGVuZXJzW2V2XS5wdXNoKGhhbmRsZXIpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBvZmYgKGV2LCBoYW5kbGVyKSB7XHJcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1tldl0pIHJldHVybjtcclxuICAgIGlmICghaGFuZGxlcikge1xyXG4gICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2V2XTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIGhJbmRleCA9IHRoaXMuX2xpc3RlbmVyc1tldl0uaW5kZXhPZihoYW5kbGVyKTtcclxuICAgIGlmIChoSW5kZXggPj0gMCkgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShoSW5kZXgsIDEpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBmaXJlRXZlbnQgKGV2KSB7XHJcbiAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzW2V2XSB8fCBbXTtcclxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGwgPT4gbCgpKTtcclxuICB9XHJcblxyXG4gIC8vIG92ZXJyaWRlIHRoaXNcclxuICByZXNvbHZlIChzdHIsIGRldGFpbHMpIHsgcmV0dXJuIHN0cjsgfVxyXG5cclxuICBnZXQgcmF3VmFsdWUgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWwudmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXQgcmF3VmFsdWUgKHN0cikge1xyXG4gICAgdGhpcy5zdGFydFJlZnJlc2goKTtcclxuICAgIHRoaXMuZWwudmFsdWUgPSBzdHI7XHJcbiAgICB0aGlzLmVuZFJlZnJlc2goKTtcclxuICB9XHJcblxyXG4gIGdldCB1bm1hc2tlZFZhbHVlICgpIHtcclxuICAgIHJldHVybiB0aGlzLnJhd1ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0IHVubWFza2VkVmFsdWUgKHZhbHVlKSB7XHJcbiAgICB0aGlzLnJhd1ZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICByZWZyZXNoICgpIHtcclxuICAgIGlmICh0aGlzLl9yZWZyZXNoaW5nQ291bnQpIHJldHVybjtcclxuICAgICsrdGhpcy5fcmVmcmVzaGluZ0NvdW50O1xyXG5cclxuICAgIHZhciBzdHIgPSB0aGlzLnJhd1ZhbHVlO1xyXG4gICAgLy8gdXNlIHVubWFza2VkIHZhbHVlIGlmIHZhbHVlIHdhcyBub3QgY2hhbmdlZCB0byB1cGRhdGUgd2l0aCBvcHRpb25zIGNvcnJlY3RseVxyXG4gICAgaWYgKHRoaXMuX29sZFJhd1ZhbHVlID09PSBzdHIpIHN0ciA9IHRoaXMuX29sZFVubWFza2VkVmFsdWU7XHJcbiAgICBkZWxldGUgdGhpcy5fb2xkUmF3VmFsdWU7XHJcbiAgICBkZWxldGUgdGhpcy5fb2xkVW5tYXNrZWRWYWx1ZTtcclxuXHJcbiAgICB2YXIgZGV0YWlscyA9IHtcclxuICAgICAgY3Vyc29yUG9zOiBzdHIubGVuZ3RoLFxyXG4gICAgICBzdGFydENoYW5nZVBvczogMCxcclxuICAgICAgb2xkU2VsZWN0aW9uOiB7XHJcbiAgICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgICAgZW5kOiBzdHIubGVuZ3RoXHJcbiAgICAgIH0sXHJcbiAgICAgIHJlbW92ZWRDb3VudDogc3RyLmxlbmd0aCxcclxuICAgICAgaW5zZXJ0ZWRDb3VudDogc3RyLmxlbmd0aCxcclxuICAgICAgb2xkVmFsdWU6IHN0clxyXG4gICAgfTtcclxuICAgIHRoaXMucmF3VmFsdWUgPSBjb25mb3JtKHRoaXMucmVzb2x2ZShzdHIsIGRldGFpbHMpLCBzdHIpO1xyXG5cclxuICAgIC0tdGhpcy5fcmVmcmVzaGluZ0NvdW50O1xyXG4gIH1cclxuXHJcbiAgc3RhcnRSZWZyZXNoICgpIHtcclxuICAgIC8vIHN0b3JlIHVubWFza2VkIHZhbHVlIHRvIGFwcGx5IGFmdGVyIGNoYW5nZXNcclxuICAgIGlmICghdGhpcy5fcmVmcmVzaGluZ0NvdW50KSB7XHJcbiAgICAgIHRoaXMuX29sZFVubWFza2VkVmFsdWUgPSB0aGlzLnVubWFza2VkVmFsdWU7XHJcbiAgICAgIHRoaXMuX29sZFJhd1ZhbHVlID0gdGhpcy5yYXdWYWx1ZTtcclxuICAgIH1cclxuICAgICsrdGhpcy5fcmVmcmVzaGluZ0NvdW50O1xyXG4gIH1cclxuXHJcbiAgZW5kUmVmcmVzaCAoKSB7XHJcbiAgICAtLXRoaXMuX3JlZnJlc2hpbmdDb3VudDtcclxuICAgIGlmICghdGhpcy5fcmVmcmVzaGluZ0NvdW50KSB0aGlzLnJlZnJlc2goKTtcclxuICB9XHJcblxyXG4gIF9vbkRyb3AgKGV2KSB7XHJcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBCYXNlTWFzayBmcm9tICcuL2Jhc2UnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIFJlZ0V4cE1hc2sgZXh0ZW5kcyBCYXNlTWFzayB7XHJcbiAgcmVzb2x2ZSAoc3RyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXNrLnRlc3Qoc3RyKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJhc2VNYXNrIGZyb20gJy4vYmFzZSc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgRnVuY01hc2sgZXh0ZW5kcyBCYXNlTWFzayB7XHJcbiAgcmVzb2x2ZSAoLi4uYXJncykge1xyXG4gICAgcmV0dXJuIHRoaXMubWFzayguLi5hcmdzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtjb25mb3JtfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCBCYXNlTWFzayBmcm9tICcuL2Jhc2UnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIFBhdHRlcm5NYXNrIGV4dGVuZHMgQmFzZU1hc2sge1xyXG4gIGNvbnN0cnVjdG9yIChlbCwgb3B0cykge1xyXG4gICAgc3VwZXIoZWwsIG9wdHMpO1xyXG4gICAgdGhpcy5zdGFydFJlZnJlc2goKTtcclxuXHJcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gb3B0cy5wbGFjZWhvbGRlcjtcclxuICAgIHRoaXMuZGVmaW5pdGlvbnMgPSB7XHJcbiAgICAgIC4uLlBhdHRlcm5NYXNrLkRFRklOSVRJT05TLFxyXG4gICAgICAuLi5vcHRzLmRlZmluaXRpb25zXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX2hvbGxvd3MgPSBbXTtcclxuICAgIHRoaXMuX2J1aWxkUmVzb2x2ZXJzKCk7XHJcblxyXG4gICAgdGhpcy5fYWxpZ25DdXJzb3IgPSB0aGlzLl9hbGlnbkN1cnNvci5iaW5kKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuZW5kUmVmcmVzaCgpO1xyXG4gIH1cclxuXHJcbiAgYmluZEV2ZW50cyAoKSB7XHJcbiAgICBzdXBlci5iaW5kRXZlbnRzKCk7XHJcbiAgICBbJ2NsaWNrJywgJ2ZvY3VzJ10uZm9yRWFjaChldiA9PlxyXG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX2FsaWduQ3Vyc29yKSk7XHJcbiAgfVxyXG5cclxuICB1bmJpbmRFdmVudHMgKCkge1xyXG4gICAgc3VwZXIudW5iaW5kRXZlbnRzKCk7XHJcbiAgICBbJ2NsaWNrJywgJ2ZvY3VzJ10uZm9yRWFjaChldiA9PlxyXG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIHRoaXMuX2FsaWduQ3Vyc29yKSk7XHJcbiAgfVxyXG5cclxuICBfYnVpbGRSZXNvbHZlcnMgKCkge1xyXG4gICAgdGhpcy5fY2hhckRlZnMgPSBbXTtcclxuICAgIHZhciBwYXR0ZXJuID0gdGhpcy5tYXNrO1xyXG5cclxuICAgIGlmICghcGF0dGVybiB8fCAhdGhpcy5kZWZpbml0aW9ucykgcmV0dXJuO1xyXG5cclxuICAgIHZhciB1bm1hc2tpbmdCbG9jayA9IGZhbHNlO1xyXG4gICAgdmFyIG9wdGlvbmFsQmxvY2sgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGk9MDsgaTxwYXR0ZXJuLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHZhciBjaCA9IHBhdHRlcm5baV07XHJcbiAgICAgIHZhciB0eXBlID0gIXVubWFza2luZ0Jsb2NrICYmIGNoIGluIHRoaXMuZGVmaW5pdGlvbnMgP1xyXG4gICAgICAgIFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCA6XHJcbiAgICAgICAgUGF0dGVybk1hc2suREVGX1RZUEVTLkZJWEVEO1xyXG4gICAgICB2YXIgdW5tYXNraW5nID0gdHlwZSA9PT0gUGF0dGVybk1hc2suREVGX1RZUEVTLklOUFVUIHx8IHVubWFza2luZ0Jsb2NrO1xyXG4gICAgICB2YXIgb3B0aW9uYWwgPSB0eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQgJiYgb3B0aW9uYWxCbG9jaztcclxuXHJcbiAgICAgIGlmIChjaCA9PT0gJ3snIHx8IGNoID09PSAnfScpIHtcclxuICAgICAgICB1bm1hc2tpbmdCbG9jayA9ICF1bm1hc2tpbmdCbG9jaztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNoID09PSAnWycgfHwgY2ggPT09ICddJykge1xyXG4gICAgICAgIG9wdGlvbmFsQmxvY2sgPSAhb3B0aW9uYWxCbG9jaztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNoID09PSAnXFxcXCcpIHtcclxuICAgICAgICArK2k7XHJcbiAgICAgICAgY2ggPSBwYXR0ZXJuW2ldO1xyXG4gICAgICAgIC8vIFRPRE8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghY2gpIGJyZWFrO1xyXG4gICAgICAgIHR5cGUgPSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuRklYRUQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX2NoYXJEZWZzLnB1c2goe1xyXG4gICAgICAgIGNoYXI6IGNoLFxyXG4gICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxyXG4gICAgICAgIHVubWFza2luZzogdW5tYXNraW5nXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3Jlc29sdmVycyA9IHt9O1xyXG4gICAgZm9yICh2YXIgZGVmS2V5IGluIHRoaXMuZGVmaW5pdGlvbnMpIHtcclxuICAgICAgdGhpcy5fcmVzb2x2ZXJzW2RlZktleV0gPSBJTWFzay5NYXNrRmFjdG9yeSh0aGlzLmVsLCB7XHJcbiAgICAgICAgbWFzazogdGhpcy5kZWZpbml0aW9uc1tkZWZLZXldXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3RyeUFwcGVuZFRhaWwgKHN0ciwgdGFpbCkge1xyXG4gICAgdmFyIHBsYWNlaG9sZGVyQnVmZmVyID0gJyc7XHJcbiAgICB2YXIgaG9sbG93cyA9IHRoaXMuX2hvbGxvd3Muc2xpY2UoKTtcclxuXHJcbiAgICBmb3IgKHZhciBjaT0wLCBkaT10aGlzLl9tYXBQb3NUb0RlZkluZGV4KHN0ci5sZW5ndGgpOyBjaSA8IHRhaWwubGVuZ3RoOyArK2RpKSB7XHJcbiAgICAgIHZhciBjaCA9IHRhaWxbY2ldO1xyXG4gICAgICB2YXIgZGVmID0gdGhpcy5fY2hhckRlZnNbZGldO1xyXG5cclxuICAgICAgLy8gZmFpbGVkXHJcbiAgICAgIGlmICghZGVmKSByZXR1cm47XHJcblxyXG4gICAgICBpZiAoZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCkge1xyXG4gICAgICAgIHZhciByZXNvbHZlciA9IHRoaXMuX3Jlc29sdmVyc1tkZWYuY2hhcl07XHJcbiAgICAgICAgdmFyIGNocmVzID0gcmVzb2x2ZXIucmVzb2x2ZShjaCwgZGksIHN0cikgfHwgJyc7XHJcbiAgICAgICAgaWYgKGNocmVzKSB7XHJcbiAgICAgICAgICBjaHJlcyA9IGNvbmZvcm0oY2hyZXMsIGNoKTtcclxuICAgICAgICAgICsrY2k7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICghZGVmLm9wdGlvbmFsKSBjaHJlcyA9IHRoaXMuX3BsYWNlaG9sZGVyLmNoYXI7XHJcbiAgICAgICAgICBob2xsb3dzLnB1c2goZGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdHIgKz0gcGxhY2Vob2xkZXJCdWZmZXIgKyBjaHJlcztcclxuICAgICAgICBwbGFjZWhvbGRlckJ1ZmZlciA9ICcnO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBsYWNlaG9sZGVyQnVmZmVyICs9IGRlZi5jaGFyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtzdHIsIGhvbGxvd3NdO1xyXG4gIH1cclxuXHJcbiAgX2V4dHJhY3RJbnB1dCAoc3RyLCBmcm9tUG9zPTApIHtcclxuICAgIHZhciBpbnB1dCA9ICcnO1xyXG5cclxuICAgIGZvciAodmFyIGNpPTAsIGRpPXRoaXMuX21hcFBvc1RvRGVmSW5kZXgoZnJvbVBvcyk7IGNpPHN0ci5sZW5ndGggJiYgZGk8dGhpcy5fY2hhckRlZnMubGVuZ3RoOyArK2RpKSB7XHJcbiAgICAgIHZhciBjaCA9IHN0cltjaV07XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcblxyXG4gICAgICBpZiAodGhpcy5faXNIaWRkZW5Ib2xsb3coZGkpKSBjb250aW51ZTtcclxuXHJcbiAgICAgIGlmIChkZWYudHlwZSA9PT0gUGF0dGVybk1hc2suREVGX1RZUEVTLklOUFVUICYmICF0aGlzLl9pc0hvbGxvdyhkaSkpIGlucHV0ICs9IGNoO1xyXG4gICAgICArK2NpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlucHV0O1xyXG4gIH1cclxuXHJcbiAgX2lzSG9sbG93IChkZWZJbmRleCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hvbGxvd3MuaW5kZXhPZihkZWZJbmRleCkgPj0gMDtcclxuICB9XHJcblxyXG4gIF9pc0hpZGRlbkhvbGxvdyAoZGVmSW5kZXgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0hvbGxvdyhkZWZJbmRleCkgJiZcclxuICAgICAgdGhpcy5fY2hhckRlZnNbZGVmSW5kZXhdICYmIHRoaXMuX2NoYXJEZWZzW2RlZkluZGV4XS5vcHRpb25hbDtcclxuICB9XHJcblxyXG4gIF9ob2xsb3dzQmVmb3JlIChkZWZJbmRleCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hvbGxvd3MuZmlsdGVyKGggPT4gaCA8IGRlZkluZGV4ICYmIHRoaXMuX2lzSGlkZGVuSG9sbG93KGgpKTtcclxuICB9XHJcblxyXG4gIF9tYXBEZWZJbmRleFRvUG9zIChkZWZJbmRleCkge1xyXG4gICAgcmV0dXJuIGRlZkluZGV4IC0gdGhpcy5faG9sbG93c0JlZm9yZShkZWZJbmRleCkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgX21hcFBvc1RvRGVmSW5kZXggKHBvcykge1xyXG4gICAgdmFyIGxhc3RIb2xsb3dJbmRleCA9IHBvcztcclxuICAgIC8vIGV4dGVuZCBjb250aWd1b3VzXHJcbiAgICB3aGlsZSAodGhpcy5faXNIaWRkZW5Ib2xsb3cobGFzdEhvbGxvd0luZGV4LTEpKSArK2xhc3RIb2xsb3dJbmRleDtcclxuXHJcbiAgICByZXR1cm4gcG9zICsgdGhpcy5faG9sbG93c0JlZm9yZShsYXN0SG9sbG93SW5kZXgpLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIF9nZW5lcmF0ZUluc2VydFN0ZXBzIChoZWFkLCBpbnNlcnRlZCkge1xyXG4gICAgdmFyIHJlcyA9IGhlYWQ7XHJcbiAgICB2YXIgaG9sbG93cyA9IHRoaXMuX2hvbGxvd3Muc2xpY2UoKTtcclxuICAgIHZhciBwbGFjZWhvbGRlckJ1ZmZlciA9ICcnO1xyXG4gICAgdmFyIGluc2VydFN0ZXBzID0gW1tyZXMsIGhvbGxvd3Muc2xpY2UoKV1dO1xyXG5cclxuICAgIGZvciAodmFyIGNpPTAsIGRpPXRoaXMuX21hcFBvc1RvRGVmSW5kZXgoaGVhZC5sZW5ndGgpOyBjaTxpbnNlcnRlZC5sZW5ndGg7KSB7XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcbiAgICAgIGlmICghZGVmKSBicmVhaztcclxuXHJcbiAgICAgIHZhciBjaCA9IGluc2VydGVkW2NpXTtcclxuICAgICAgaWYgKGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQpIHtcclxuICAgICAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLl9yZXNvbHZlcnNbZGVmLmNoYXJdO1xyXG4gICAgICAgIHZhciBjaHJlcyA9IHJlc29sdmVyLnJlc29sdmUoY2gsIGNpLCByZXMpIHx8ICcnO1xyXG4gICAgICAgIC8vIGlmIG9rIC0gbmV4dCBkaVxyXG4gICAgICAgIGlmIChjaHJlcykge1xyXG4gICAgICAgICAgcmVzICs9IHBsYWNlaG9sZGVyQnVmZmVyICsgY29uZm9ybShjaHJlcywgY2gpOyBwbGFjZWhvbGRlckJ1ZmZlciA9ICcnO1xyXG4gICAgICAgICAgaW5zZXJ0U3RlcHMucHVzaChbcmVzLCBob2xsb3dzLnNsaWNlKCldKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRlZi5vcHRpb25hbCkge1xyXG4gICAgICAgICAgaWYgKGhvbGxvd3MuaW5kZXhPZihkaSkgPCAwKSBob2xsb3dzLnB1c2goZGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hyZXMgfHwgZGVmLm9wdGlvbmFsKSArK2RpO1xyXG4gICAgICAgIGlmIChjaHJlcyB8fCAhZGVmLm9wdGlvbmFsKSArK2NpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBsYWNlaG9sZGVyQnVmZmVyICs9IGRlZi5jaGFyO1xyXG5cclxuICAgICAgICBpZiAoY2ggPT09IGRlZi5jaGFyKSArK2NpO1xyXG4gICAgICAgICsrZGk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5zZXJ0U3RlcHM7XHJcbiAgfVxyXG5cclxuICByZXNvbHZlIChzdHIsIGRldGFpbHMpIHtcclxuICAgIHZhciBjdXJzb3JQb3MgPSBkZXRhaWxzLmN1cnNvclBvcztcclxuICAgIHZhciBvbGRTZWxlY3Rpb24gPSBkZXRhaWxzLm9sZFNlbGVjdGlvbjtcclxuICAgIHZhciBvbGRWYWx1ZSA9IGRldGFpbHMub2xkVmFsdWU7XHJcbiAgICB2YXIgc3RhcnRDaGFuZ2VQb3MgPSBNYXRoLm1pbihjdXJzb3JQb3MsIG9sZFNlbGVjdGlvbi5zdGFydCk7XHJcbiAgICAvLyBNYXRoLm1heCBmb3Igb3Bwb3NpdGUgb3BlcmF0aW9uXHJcbiAgICB2YXIgcmVtb3ZlZENvdW50ID0gTWF0aC5tYXgoKG9sZFNlbGVjdGlvbi5lbmQgLSBzdGFydENoYW5nZVBvcykgfHxcclxuICAgICAgLy8gZm9yIERlbGV0ZVxyXG4gICAgICBvbGRWYWx1ZS5sZW5ndGggLSBzdHIubGVuZ3RoLCAwKTtcclxuICAgIHZhciBpbnNlcnRlZENvdW50ID0gY3Vyc29yUG9zIC0gc3RhcnRDaGFuZ2VQb3M7XHJcblxyXG5cclxuICAgIHZhciBoZWFkID0gc3RyLnN1YnN0cmluZygwLCBzdGFydENoYW5nZVBvcyk7XHJcbiAgICB2YXIgdGFpbCA9IHN0ci5zdWJzdHJpbmcoc3RhcnRDaGFuZ2VQb3MgKyBpbnNlcnRlZENvdW50KTtcclxuICAgIHZhciBpbnNlcnRlZCA9IHN0ci5zdWJzdHIoc3RhcnRDaGFuZ2VQb3MsIGluc2VydGVkQ291bnQpO1xyXG5cclxuICAgIHZhciB0YWlsSW5wdXQgPSB0aGlzLl9leHRyYWN0SW5wdXQodGFpbCwgc3RhcnRDaGFuZ2VQb3MgKyByZW1vdmVkQ291bnQpO1xyXG5cclxuICAgIC8vIHJlbW92ZSBob2xsb3dzIGFmdGVyIGN1cnNvclxyXG4gICAgdmFyIGxhc3RIb2xsb3dJbmRleCA9IHRoaXMuX21hcFBvc1RvRGVmSW5kZXgoc3RhcnRDaGFuZ2VQb3MpO1xyXG4gICAgdGhpcy5faG9sbG93cyA9IHRoaXMuX2hvbGxvd3MuZmlsdGVyKGggPT4gaCA8IGxhc3RIb2xsb3dJbmRleCk7XHJcblxyXG4gICAgdmFyIHJlcyA9IGhlYWQ7XHJcblxyXG4gICAgLy8gaW5zZXJ0IGF2YWlsYWJsZVxyXG4gICAgdmFyIGluc2VydFN0ZXBzID0gdGhpcy5fZ2VuZXJhdGVJbnNlcnRTdGVwcyhoZWFkLCBpbnNlcnRlZCk7XHJcbiAgICBmb3IgKHZhciBpc3RlcD1pbnNlcnRTdGVwcy5sZW5ndGgtMTsgaXN0ZXAgPj0gMDsgLS1pc3RlcCkge1xyXG4gICAgICB2YXIgc3RlcDtcclxuICAgICAgW3N0ZXAsIHRoaXMuX2hvbGxvd3NdID0gaW5zZXJ0U3RlcHNbaXN0ZXBdO1xyXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fdHJ5QXBwZW5kVGFpbChzdGVwLCB0YWlsSW5wdXQpO1xyXG4gICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgW3JlcywgdGhpcy5faG9sbG93c10gPSByZXN1bHQ7XHJcbiAgICAgICAgY3Vyc29yUG9zID0gc3RlcC5sZW5ndGg7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5zZXJ0ZWQpIHtcclxuICAgICAgLy8gYXBwZW5kIGZpeGVkIGF0IGVuZFxyXG4gICAgICB2YXIgYXBwZW5kZWQgPSB0aGlzLl9hcHBlbmRGaXhlZEVuZChyZXMpO1xyXG4gICAgICBjdXJzb3JQb3MgKz0gYXBwZW5kZWQubGVuZ3RoIC0gcmVzLmxlbmd0aDtcclxuICAgICAgcmVzID0gYXBwZW5kZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIGhlYWQgZml4ZWQgYW5kIGhvbGxvd3MgaWYgcmVtb3ZlZCBhdCBlbmRcclxuICAgIGlmICghaW5zZXJ0ZWQgJiYgY3Vyc29yUG9zID09PSByZXMubGVuZ3RoKSB7XHJcbiAgICAgIHZhciBkaSA9IHRoaXMuX21hcFBvc1RvRGVmSW5kZXgoY3Vyc29yUG9zLTEpO1xyXG4gICAgICB2YXIgaGFzSG9sbG93cyA9IGZhbHNlO1xyXG4gICAgICBmb3IgKDsgZGkgPiAwOyAtLWRpKSB7XHJcbiAgICAgICAgdmFyIGRlZiA9IHRoaXMuX2NoYXJEZWZzW2RpXTtcclxuICAgICAgICBpZiAoZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuX2lzSG9sbG93KGRpKSkgaGFzSG9sbG93cyA9IHRydWU7XHJcbiAgICAgICAgICBlbHNlIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoaGFzSG9sbG93cykgcmVzID0gcmVzLnNsaWNlKDAsIGRpICsgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYXBwZW5kIHBsYWNlaG9sZGVyXHJcbiAgICByZXMgPSB0aGlzLl9hcHBlbmRQbGFjZWhvbGRlckVuZChyZXMpO1xyXG4gICAgZGV0YWlscy5jdXJzb3JQb3MgPSBjdXJzb3JQb3M7XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHByb2Nlc3NJbnB1dCAoZXYpIHtcclxuICAgIHZhciByZXMgPSBzdXBlci5wcm9jZXNzSW5wdXQoZXYpO1xyXG4gICAgaWYgKHJlcyAhPT0gdGhpcy5fb2xkVmFsdWUgJiYgdGhpcy5pc0NvbXBsZXRlKSB0aGlzLmZpcmVFdmVudChcImNvbXBsZXRlXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzQ29tcGxldGUgKCkge1xyXG4gICAgcmV0dXJuICF0aGlzLl9jaGFyRGVmcy5maWx0ZXIoKGRlZiwgZGkpID0+XHJcbiAgICAgIGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQgJiYgIWRlZi5vcHRpb25hbCAmJlxyXG4gICAgICB0aGlzLl9pc0hvbGxvdyhkaSkgPj0gMCkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgX2FwcGVuZEZpeGVkRW5kIChyZXMpIHtcclxuICAgIGZvciAodmFyIGRpPXRoaXMuX21hcFBvc1RvRGVmSW5kZXgocmVzLmxlbmd0aCk7OyArK2RpKSB7XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcbiAgICAgIGlmICghZGVmKSBicmVhaztcclxuXHJcbiAgICAgIGlmICh0aGlzLl9pc0hpZGRlbkhvbGxvdyhkaSkpIGNvbnRpbnVlO1xyXG4gICAgICBpZiAoZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCkgYnJlYWs7XHJcbiAgICAgIGlmIChkaSA+PSByZXMubGVuZ3RoKSByZXMgKz0gZGVmLmNoYXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgX2FwcGVuZFBsYWNlaG9sZGVyRW5kIChyZXMpIHtcclxuICAgIGZvciAodmFyIGRpPXRoaXMuX21hcFBvc1RvRGVmSW5kZXgocmVzLmxlbmd0aCk7IGRpPHRoaXMuX2NoYXJEZWZzLmxlbmd0aDsgKytkaSkge1xyXG4gICAgICB2YXIgZGVmID0gdGhpcy5fY2hhckRlZnNbZGldO1xyXG4gICAgICBpZiAoZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCAmJiAhdGhpcy5faXNIb2xsb3coZGkpKSB7XHJcbiAgICAgICAgdGhpcy5faG9sbG93cy5wdXNoKGRpKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5fcGxhY2Vob2xkZXIuc2hvdyA9PT0gJ2Fsd2F5cycpIHtcclxuICAgICAgICByZXMgKz0gZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5GSVhFRCA/XHJcbiAgICAgICAgICBkZWYuY2hhciA6XHJcbiAgICAgICAgICAhZGVmLm9wdGlvbmFsID9cclxuICAgICAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIuY2hhciA6XHJcbiAgICAgICAgICAgICcnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHVubWFza2VkVmFsdWUgKCkge1xyXG4gICAgdmFyIHN0ciA9IHRoaXMucmF3VmFsdWU7XHJcbiAgICB2YXIgdW5tYXNrZWQgPSAnJztcclxuICAgIGZvciAodmFyIGNpPTAsIGRpPTA7IGNpPHN0ci5sZW5ndGggJiYgZGk8dGhpcy5fY2hhckRlZnMubGVuZ3RoOyArK2RpKSB7XHJcbiAgICAgIHZhciBjaCA9IHN0cltjaV07XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcblxyXG4gICAgICBpZiAodGhpcy5faXNIaWRkZW5Ib2xsb3coZGkpKSBjb250aW51ZTtcclxuXHJcbiAgICAgIGlmIChkZWYudW5tYXNraW5nICYmICF0aGlzLl9pc0hvbGxvdyhkaSkgJiZcclxuICAgICAgICAoZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCAmJiB0aGlzLl9yZXNvbHZlcnNbZGVmLmNoYXJdLnJlc29sdmUoY2gsIGNpLCBzdHIpIHx8XHJcbiAgICAgICAgICBkZWYuY2hhciA9PT0gY2gpKSB7XHJcbiAgICAgICAgdW5tYXNrZWQgKz0gY2g7XHJcbiAgICAgIH1cclxuICAgICAgKytjaTtcclxuICAgIH1cclxuICAgIHJldHVybiB1bm1hc2tlZDtcclxuICB9XHJcblxyXG4gIHNldCB1bm1hc2tlZFZhbHVlIChzdHIpIHtcclxuICAgIHRoaXMuc3RhcnRSZWZyZXNoKCk7XHJcblxyXG4gICAgdmFyIHJlcyA9ICcnO1xyXG4gICAgZm9yICh2YXIgY2k9MCwgZGk9MDsgY2k8c3RyLmxlbmd0aCAmJiBkaTx0aGlzLl9jaGFyRGVmcy5sZW5ndGg7KSB7XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcbiAgICAgIHZhciBjaCA9IHN0cltjaV07XHJcblxyXG4gICAgICB2YXIgY2hyZXMgPSAnJztcclxuICAgICAgaWYgKGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQpIHtcclxuICAgICAgICBpZiAodGhpcy5fcmVzb2x2ZXJzW2RlZi5jaGFyXS5yZXNvbHZlKGNoLCBjaSwgcmVzKSkge1xyXG4gICAgICAgICAgY2hyZXMgPSBjaDtcclxuICAgICAgICAgICsrZGk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICsrY2k7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hyZXMgPSBkZWYuY2hhcjtcclxuICAgICAgICBpZiAoZGVmLnVubWFza2luZyAmJiBkZWYuY2hhciA9PT0gY2gpICsrY2k7XHJcbiAgICAgICAgKytkaTtcclxuICAgICAgfVxyXG4gICAgICByZXMgKz0gY2hyZXM7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9ob2xsb3dzLmxlbmd0aCA9IDA7XHJcbiAgICB0aGlzLnJhd1ZhbHVlID0gcmVzO1xyXG5cclxuICAgIHRoaXMuZW5kUmVmcmVzaCgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHBsYWNlaG9sZGVyICgpIHsgcmV0dXJuIHRoaXMuX3BsYWNlaG9sZGVyOyB9XHJcblxyXG4gIHNldCBwbGFjZWhvbGRlciAocGgpIHtcclxuICAgIHRoaXMuc3RhcnRSZWZyZXNoKCk7XHJcbiAgICB0aGlzLl9wbGFjZWhvbGRlciA9IHtcclxuICAgICAgLi4uUGF0dGVybk1hc2suREVGQVVMVF9QTEFDRUhPTERFUixcclxuICAgICAgLi4ucGhcclxuICAgIH07XHJcbiAgICB0aGlzLmVuZFJlZnJlc2goKTtcclxuICB9XHJcblxyXG4gIGdldCBwbGFjZWhvbGRlckxhYmVsICgpIHtcclxuICAgIHJldHVybiB0aGlzLl9jaGFyRGVmcy5tYXAoZGVmID0+XHJcbiAgICAgIGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuRklYRUQgP1xyXG4gICAgICAgIGRlZi5jaGFyIDpcclxuICAgICAgICAhZGVmLm9wdGlvbmFsID9cclxuICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLmNoYXIgOlxyXG4gICAgICAgICAgJycpLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRlZmluaXRpb25zICgpIHsgcmV0dXJuIHRoaXMuX2RlZmluaXRpb25zOyB9XHJcblxyXG4gIHNldCBkZWZpbml0aW9ucyAoZGVmcykge1xyXG4gICAgdGhpcy5zdGFydFJlZnJlc2goKTtcclxuICAgIHRoaXMuX2RlZmluaXRpb25zID0gZGVmcztcclxuICAgIHRoaXMuX2J1aWxkUmVzb2x2ZXJzKCk7XHJcbiAgICB0aGlzLmVuZFJlZnJlc2goKTtcclxuICB9XHJcblxyXG4gIGdldCBtYXNrICgpIHsgcmV0dXJuIHRoaXMuX21hc2s7IH1cclxuXHJcbiAgc2V0IG1hc2sgKG1hc2spIHtcclxuICAgIHZhciBpbml0aWFsaXplZCA9IHRoaXMuX21hc2s7XHJcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHRoaXMuc3RhcnRSZWZyZXNoKCk7XHJcbiAgICB0aGlzLl9tYXNrID0gbWFzaztcclxuICAgIGlmIChpbml0aWFsaXplZCkge1xyXG4gICAgICB0aGlzLl9idWlsZFJlc29sdmVycygpO1xyXG4gICAgICB0aGlzLmVuZFJlZnJlc2goKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9hbGlnbkN1cnNvciAoKSB7XHJcbiAgICB2YXIgY3Vyc29yUG9zID0gdGhpcy5lbC5zZWxlY3Rpb25FbmQ7XHJcbiAgICB2YXIgY3Vyc29yRGVmSW5kZXggPSB0aGlzLl9tYXBQb3NUb0RlZkluZGV4KGN1cnNvclBvcyk7XHJcbiAgICBmb3IgKHZhciByUG9zID0gY3Vyc29yRGVmSW5kZXg7IHJQb3MgPj0gMDsgLS1yUG9zKSB7XHJcbiAgICAgIHZhciByRGVmID0gdGhpcy5fY2hhckRlZnNbclBvc107XHJcbiAgICAgIHZhciBsUG9zID0gclBvcy0xO1xyXG4gICAgICB2YXIgbERlZiA9IHRoaXMuX2NoYXJEZWZzW2xQb3NdO1xyXG4gICAgICBpZiAodGhpcy5faXNIaWRkZW5Ib2xsb3cobFBvcykpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgaWYgKCghckRlZiB8fCByRGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCAmJiB0aGlzLl9pc0hvbGxvdyhyUG9zKSAmJiAhdGhpcy5faXNIaWRkZW5Ib2xsb3coclBvcykpICYmXHJcbiAgICAgICAgIXRoaXMuX2lzSG9sbG93KGxQb3MpKSB7XHJcbiAgICAgICAgY3Vyc29yRGVmSW5kZXggPSByUG9zO1xyXG4gICAgICAgIGlmICghbERlZiB8fCBsRGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCkgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGN1cnNvclBvcyA9IHRoaXMuX21hcERlZkluZGV4VG9Qb3MoY3Vyc29yRGVmSW5kZXgpO1xyXG4gICAgdGhpcy5lbC5zZXRTZWxlY3Rpb25SYW5nZShjdXJzb3JQb3MsIGN1cnNvclBvcyk7XHJcbiAgfVxyXG59XHJcblBhdHRlcm5NYXNrLkRFRklOSVRJT05TID0ge1xyXG4gICcwJzogL1xcZC8sXHJcbiAgJ2EnOiAvW1xcdTAwNDEtXFx1MDA1QVxcdTAwNjEtXFx1MDA3QVxcdTAwQUFcXHUwMEI1XFx1MDBCQVxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyN1xcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMFxcdTA4QTItXFx1MDhBQ1xcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdGXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzNcXHUwQzM1LVxcdTBDMzlcXHUwQzNEXFx1MEM1OFxcdTBDNTlcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ2MFxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFDXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlDMS1cXHUxOUM3XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OTdcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3OEVcXHVBNzkwLVxcdUE3OTNcXHVBN0EwLVxcdUE3QUFcXHVBN0Y4LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTgwLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCQzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ10vLCAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjIwNzUwNzBcclxuICAnKic6IC8uL1xyXG59O1xyXG5QYXR0ZXJuTWFzay5ERUZfVFlQRVMgPSB7XHJcbiAgSU5QVVQ6ICdpbnB1dCcsXHJcbiAgRklYRUQ6ICdmaXhlZCdcclxufVxyXG5QYXR0ZXJuTWFzay5ERUZBVUxUX1BMQUNFSE9MREVSID0ge1xyXG4gIHNob3c6ICdsYXp5JyxcclxuICBjaGFyOiAnXydcclxufTtcclxuIiwiaW1wb3J0IHtpc1N0cmluZ30gZnJvbSAnLi91dGlscyc7XHJcblxyXG5pbXBvcnQgQmFzZU1hc2sgZnJvbSAnLi9tYXNrcy9iYXNlJztcclxuaW1wb3J0IFJlZ0V4cE1hc2sgZnJvbSAnLi9tYXNrcy9yZWdleHAnO1xyXG5pbXBvcnQgRnVuY01hc2sgZnJvbSAnLi9tYXNrcy9mdW5jJztcclxuaW1wb3J0IFBhdHRlcm5NYXNrIGZyb20gJy4vbWFza3MvcGF0dGVybic7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHRcclxuZnVuY3Rpb24gSU1hc2sgKGVsLCBvcHRzPXt9KSB7XHJcbiAgdmFyIG1hc2sgPSBJTWFzay5NYXNrRmFjdG9yeShlbCwgb3B0cyk7XHJcbiAgbWFzay5iaW5kRXZlbnRzKCk7XHJcbiAgLy8gcmVmcmVzaFxyXG4gIG1hc2sucmF3VmFsdWUgPSBlbC52YWx1ZTtcclxuICByZXR1cm4gbWFzaztcclxufVxyXG5cclxuSU1hc2suTWFza0ZhY3RvcnkgPSBmdW5jdGlvbiAoZWwsIG9wdHMpIHtcclxuICB2YXIgbWFzayA9IG9wdHMubWFzaztcclxuICBpZiAobWFzayBpbnN0YW5jZW9mIEJhc2VNYXNrKSByZXR1cm4gbWFzaztcclxuICBpZiAobWFzayBpbnN0YW5jZW9mIFJlZ0V4cCkgcmV0dXJuIG5ldyBSZWdFeHBNYXNrKGVsLCBvcHRzKTtcclxuICBpZiAobWFzayBpbnN0YW5jZW9mIEZ1bmN0aW9uKSByZXR1cm4gbmV3IEZ1bmNNYXNrKGVsLCBvcHRzKTtcclxuICBpZiAoaXNTdHJpbmcobWFzaykpIHJldHVybiBuZXcgUGF0dGVybk1hc2soZWwsIG9wdHMpO1xyXG4gIHJldHVybiBuZXcgQmFzZU1hc2soZWwsIG9wdHMpO1xyXG59XHJcbklNYXNrLkJhc2VNYXNrID0gQmFzZU1hc2s7XHJcbklNYXNrLkZ1bmNNYXNrID0gRnVuY01hc2s7XHJcbklNYXNrLlJlZ0V4cE1hc2sgPSBSZWdFeHBNYXNrO1xyXG5JTWFzay5QYXR0ZXJuTWFzayA9IFBhdHRlcm5NYXNrO1xyXG53aW5kb3cuSU1hc2sgPSBJTWFzaztcclxuIl0sIm5hbWVzIjpbImlzU3RyaW5nIiwic3RyIiwiU3RyaW5nIiwiY29uZm9ybSIsInJlcyIsImZhbGxiYWNrIiwiQmFzZU1hc2siLCJlbCIsIm9wdHMiLCJtYXNrIiwiX2xpc3RlbmVycyIsIl9yZWZyZXNoaW5nQ291bnQiLCJzYXZlU3RhdGUiLCJiaW5kIiwicHJvY2Vzc0lucHV0IiwiX29uRHJvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidW5iaW5kRXZlbnRzIiwibGVuZ3RoIiwiZXYiLCJfb2xkVmFsdWUiLCJyYXdWYWx1ZSIsIl9vbGRTZWxlY3Rpb24iLCJzZWxlY3Rpb25TdGFydCIsImN1cnNvclBvcyIsImlucHV0VmFsdWUiLCJkZXRhaWxzIiwicmVzb2x2ZSIsImZpcmVFdmVudCIsImhhbmRsZXIiLCJwdXNoIiwiaEluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImxpc3RlbmVycyIsImZvckVhY2giLCJsIiwiX29sZFJhd1ZhbHVlIiwiX29sZFVubWFza2VkVmFsdWUiLCJ1bm1hc2tlZFZhbHVlIiwicmVmcmVzaCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic2VsZWN0aW9uRW5kIiwicG9zIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJ2YWx1ZSIsInN0YXJ0UmVmcmVzaCIsImVuZFJlZnJlc2giLCJSZWdFeHBNYXNrIiwidGVzdCIsIkZ1bmNNYXNrIiwiUGF0dGVybk1hc2siLCJwbGFjZWhvbGRlciIsImRlZmluaXRpb25zIiwiREVGSU5JVElPTlMiLCJfaG9sbG93cyIsIl9idWlsZFJlc29sdmVycyIsIl9hbGlnbkN1cnNvciIsIl9jaGFyRGVmcyIsInBhdHRlcm4iLCJ1bm1hc2tpbmdCbG9jayIsIm9wdGlvbmFsQmxvY2siLCJpIiwiY2giLCJ0eXBlIiwiREVGX1RZUEVTIiwiSU5QVVQiLCJGSVhFRCIsInVubWFza2luZyIsIm9wdGlvbmFsIiwiX3Jlc29sdmVycyIsImRlZktleSIsIklNYXNrIiwiTWFza0ZhY3RvcnkiLCJ0YWlsIiwicGxhY2Vob2xkZXJCdWZmZXIiLCJob2xsb3dzIiwic2xpY2UiLCJjaSIsImRpIiwiX21hcFBvc1RvRGVmSW5kZXgiLCJkZWYiLCJyZXNvbHZlciIsImNoYXIiLCJjaHJlcyIsIl9wbGFjZWhvbGRlciIsImZyb21Qb3MiLCJpbnB1dCIsIl9pc0hpZGRlbkhvbGxvdyIsIl9pc0hvbGxvdyIsImRlZkluZGV4IiwiZmlsdGVyIiwiaCIsIl9ob2xsb3dzQmVmb3JlIiwibGFzdEhvbGxvd0luZGV4IiwiaGVhZCIsImluc2VydGVkIiwiaW5zZXJ0U3RlcHMiLCJvbGRTZWxlY3Rpb24iLCJvbGRWYWx1ZSIsInN0YXJ0Q2hhbmdlUG9zIiwiTWF0aCIsIm1pbiIsInN0YXJ0IiwicmVtb3ZlZENvdW50IiwibWF4IiwiZW5kIiwiaW5zZXJ0ZWRDb3VudCIsInN1YnN0cmluZyIsInN1YnN0ciIsInRhaWxJbnB1dCIsIl9leHRyYWN0SW5wdXQiLCJfZ2VuZXJhdGVJbnNlcnRTdGVwcyIsImlzdGVwIiwic3RlcCIsInJlc3VsdCIsIl90cnlBcHBlbmRUYWlsIiwiYXBwZW5kZWQiLCJfYXBwZW5kRml4ZWRFbmQiLCJoYXNIb2xsb3dzIiwiX2FwcGVuZFBsYWNlaG9sZGVyRW5kIiwiaXNDb21wbGV0ZSIsInNob3ciLCJjdXJzb3JEZWZJbmRleCIsInJQb3MiLCJyRGVmIiwibFBvcyIsImxEZWYiLCJfbWFwRGVmSW5kZXhUb1BvcyIsInVubWFza2VkIiwicGgiLCJERUZBVUxUX1BMQUNFSE9MREVSIiwibWFwIiwiam9pbiIsIl9kZWZpbml0aW9ucyIsImRlZnMiLCJfbWFzayIsImluaXRpYWxpemVkIiwiYmluZEV2ZW50cyIsIlJlZ0V4cCIsIkZ1bmN0aW9uIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxTQUFTQSxRQUFULENBQW1CQyxHQUFuQixFQUF3QjtTQUNmLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCQSxlQUFlQyxNQUFqRDs7O0FBR0YsQUFDQSxTQUFTQyxPQUFULENBQWtCQyxHQUFsQixFQUF1QkgsR0FB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"}