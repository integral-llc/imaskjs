{"version":3,"file":"imask.js","sources":["utils.js","masks/base.js","masks/regexp.js","masks/func.js","masks/pattern.js","imask.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n","import {conform} from '../utils';\r\n\r\n\r\nexport default\r\nclass BaseMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.mask = opts.mask;\r\n\r\n    this._listeners = {};\r\n    this._refreshingCount = 0;\r\n\r\n    this.saveState = this.saveState.bind(this);\r\n    this.processInput = this.processInput.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveState);\r\n    this.el.addEventListener('input', this.processInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this.saveState);\r\n    this.el.removeEventListener('input', this.processInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    this.el.setSelectionRange(pos, pos);\r\n  }\r\n\r\n  saveState (ev) {\r\n    this._oldRawValue = this.rawValue;\r\n    this._oldUnmaskedValue = this.unmaskedValue;\r\n    this._oldSelection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    }\r\n  }\r\n\r\n  _changeState (details) {\r\n    details = {\r\n      cursorPos: this.cursorPos,\r\n      oldSelection: this._oldSelection,\r\n      oldValue: this._oldRawValue,\r\n      oldUnmaskedValue: this._oldUnmaskedValue,\r\n      ...details\r\n    };\r\n\r\n    var inputValue = this.rawValue;\r\n    var res = inputValue;\r\n    res = conform(this.resolve(res, details),\r\n      res,\r\n      this._oldRawValue);\r\n\r\n    if (res !== inputValue) {\r\n      this.el.value = res;\r\n      this.cursorPos = details.cursorPos;\r\n      // also queue change cursor for some browsers\r\n      setTimeout(() => this.cursorPos = details.cursorPos, 0);\r\n    }\r\n\r\n    this._onChangeState();\r\n\r\n    return res;\r\n  }\r\n\r\n  _onChangeState () {\r\n    this._fireChangeEvents();\r\n    this.saveState();\r\n  }\r\n\r\n  get _isChanged () {\r\n    return (this.rawValue !== this._oldRawValue ||\r\n      this.unmaskedValue !== this._oldUnmaskedValue);\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    if (this._isChanged) this.fireEvent(\"accept\");\r\n  }\r\n\r\n  processInput (ev) {\r\n    if (!this._isChanged) return;\r\n    this._changeState();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    var listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  // override this\r\n  resolve (str, details) { return str; }\r\n\r\n  get rawValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    this.el.value = str;\r\n    this._changeState({\r\n      cursorPos: str.length,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: str.length\r\n      },\r\n      oldValue: str\r\n    });\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.rawValue;\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.rawValue = value;\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass RegExpMask extends BaseMask {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass FuncMask extends BaseMask {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import {conform} from '../utils';\r\nimport BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass PatternMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n\r\n    this._hollows = [];\r\n    this.placeholder = opts.placeholder;\r\n    this.definitions = {\r\n      ...PatternMask.DEFINITIONS,\r\n      ...opts.definitions\r\n    };\r\n\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    ['click', 'focus'].forEach(ev =>\r\n      this.el.addEventListener(ev, this._alignCursor));\r\n  }\r\n\r\n  unbindEvents () {\r\n    super.unbindEvents();\r\n    ['click', 'focus'].forEach(ev =>\r\n      this.el.removeEventListener(ev, this._alignCursor));\r\n  }\r\n\r\n  _installDefinitions (definitions) {\r\n    this._definitions = definitions;\r\n    this._charDefs = [];\r\n    var pattern = this.mask;\r\n\r\n    if (!pattern || !definitions) return;\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in definitions ?\r\n        PatternMask.DEF_TYPES.INPUT :\r\n        PatternMask.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternMask.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternMask.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\\\\') {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternMask.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._buildResolvers();\r\n  }\r\n\r\n  _buildResolvers () {\r\n    this._resolvers = {};\r\n    for (var defKey in this.definitions) {\r\n      this._resolvers[defKey] = IMask.MaskFactory(this.el, {\r\n        mask: this.definitions[defKey]\r\n      });\r\n    }\r\n  }\r\n\r\n  _appendTail (str, tail) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    var overflow = false;\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(str.length); ci < tail.length; ++di) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      // failed\r\n      if (!def) {\r\n        overflow = true;\r\n        break;\r\n      }\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, di, str) || '';\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n          ++ci;\r\n        } else {\r\n          if (!def.optional) chres = this._placeholder.char;\r\n          hollows.push(di);\r\n        }\r\n        str += placeholderBuffer + chres;\r\n        placeholderBuffer = '';\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n      }\r\n    }\r\n\r\n    return [str, hollows, overflow];\r\n  }\r\n\r\n  _extractInput (str, fromPos=0) {\r\n    var input = '';\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(fromPos); ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _isHollow (defIndex) {\r\n    return this._hollows.indexOf(defIndex) >= 0;\r\n  }\r\n\r\n  _isHiddenHollow (defIndex) {\r\n    return this._isHollow(defIndex) &&\r\n      this._charDefs[defIndex] && this._charDefs[defIndex].optional;\r\n  }\r\n\r\n  _hollowsBefore (defIndex) {\r\n    return this._hollows.filter(h => h < defIndex && this._isHiddenHollow(h));\r\n  }\r\n\r\n  _mapDefIndexToPos (defIndex) {\r\n    return defIndex - this._hollowsBefore(defIndex).length;\r\n  }\r\n\r\n  _mapPosToDefIndex (pos) {\r\n    var lastHollowIndex = pos;\r\n    // extend contiguous\r\n    while (this._isHiddenHollow(lastHollowIndex-1)) ++lastHollowIndex;\r\n\r\n    return pos + this._hollowsBefore(lastHollowIndex).length;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var res = head;\r\n    var hollows = this._hollows.slice();\r\n    var placeholderBuffer = '';\r\n    var insertSteps = [[res, hollows.slice()]];\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(head.length); ci<inserted.length;) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      var ch = inserted[ci];\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, ci, res) || '';\r\n        // if ok - next di\r\n        if (chres) {\r\n          res += placeholderBuffer + conform(chres, ch); placeholderBuffer = '';\r\n          insertSteps.push([res, hollows.slice()]);\r\n        } else if (def.optional) {\r\n          if (hollows.indexOf(di) < 0) hollows.push(di);\r\n        }\r\n        if (chres || def.optional) ++di;\r\n        if (chres || !def.optional) ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n    }\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    var cursorPos = details.cursorPos;\r\n    var oldSelection = details.oldSelection;\r\n    var oldValue = details.oldValue;\r\n    var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n    // Math.max for opposite operation\r\n    var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n      // for Delete\r\n      oldValue.length - str.length, 0);\r\n    var insertedCount = cursorPos - startChangePos;\r\n\r\n\r\n    var head = str.substring(0, startChangePos);\r\n    var tail = str.substring(startChangePos + insertedCount);\r\n    var inserted = str.substr(startChangePos, insertedCount);\r\n\r\n    var tailInput = this._extractInput(tail, startChangePos + removedCount);\r\n\r\n    // remove hollows after cursor\r\n    var lastHollowIndex = this._mapPosToDefIndex(startChangePos);\r\n    this._hollows = this._hollows.filter(h => h < lastHollowIndex);\r\n\r\n    var res = head;\r\n\r\n    // insert available\r\n    var insertSteps = this._generateInsertSteps(head, inserted);\r\n    for (var istep=insertSteps.length-1; istep >= 0; --istep) {\r\n      var step;\r\n      [step, this._hollows] = insertSteps[istep];\r\n      var [tres, thollows, overflow] = this._appendTail(step, tailInput);\r\n      if (!overflow) {\r\n        [res, this._hollows] = [tres, thollows];\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (inserted) {\r\n      // append fixed at end\r\n      var appended = this._appendFixedEnd(res);\r\n      cursorPos += appended.length - res.length;\r\n      res = appended;\r\n    }\r\n\r\n    // remove head fixed and hollows if removed at end\r\n    if (!inserted && cursorPos === res.length) {\r\n      var di = this._mapPosToDefIndex(cursorPos-1);\r\n      var hasHollows = false;\r\n      for (; di > 0; --di) {\r\n        var def = this._charDefs[di];\r\n        if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n          if (this._isHollow(di)) hasHollows = true;\r\n          else break;\r\n        }\r\n      }\r\n      if (hasHollows) res = res.slice(0, di + 1);\r\n    }\r\n\r\n    // append placeholder\r\n    res = this._appendPlaceholderEnd(res);\r\n    details.cursorPos = cursorPos;\r\n\r\n    return res;\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    // fire 'complete' after 'accept' event\r\n    super._fireChangeEvents();\r\n    if (this._isChanged && this.isComplete) this.fireEvent(\"complete\");\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.filter((def, di) =>\r\n      def.type === PatternMask.DEF_TYPES.INPUT && !def.optional &&\r\n      this._isHollow(di)).length;\r\n  }\r\n\r\n  _appendFixedEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length);; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      if (di >= res.length) res += def.char;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _appendPlaceholderEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length); di<this._charDefs.length; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) {\r\n        this._hollows.push(di);\r\n      }\r\n      if (this._placeholder.show === 'always') {\r\n        res += def.type === PatternMask.DEF_TYPES.FIXED ?\r\n          def.char :\r\n          !def.optional ?\r\n            this._placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    var str = this.rawValue;\r\n    var unmasked = '';\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.unmasking && !this._isHollow(di) &&\r\n        (def.type === PatternMask.DEF_TYPES.INPUT && this._resolvers[def.char].resolve(ch, ci, str) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n      ++ci;\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this._hollows.length = 0;\r\n    var res;\r\n    [res, this._hollows] = this._appendTail('', str);\r\n    this.el.value = this._appendPlaceholderEnd(res);\r\n\r\n    this._onChangeState();\r\n  }\r\n\r\n  get placeholder () { return this._placeholder; }\r\n\r\n  set placeholder (ph) {\r\n    this._placeholder = {\r\n      ...PatternMask.DEFAULT_PLACEHOLDER,\r\n      ...ph\r\n    };\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get placeholderLabel () {\r\n    return this._charDefs.map(def =>\r\n      def.type === PatternMask.DEF_TYPES.FIXED ?\r\n        def.char :\r\n        !def.optional ?\r\n          this._placeholder.char :\r\n          '').join('');\r\n  }\r\n\r\n  get definitions () { return this._definitions; }\r\n\r\n  set definitions (defs) {\r\n    this._installDefinitions(defs);\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get mask () { return this._mask; }\r\n\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n    if (this._initialized) this.definitions = this.definitions;\r\n  }\r\n\r\n  _alignCursor () {\r\n    var cursorDefIndex = this._mapPosToDefIndex(this.cursorPos);\r\n    for (var rPos = cursorDefIndex; rPos >= 0; --rPos) {\r\n      var rDef = this._charDefs[rPos];\r\n      var lPos = rPos-1;\r\n      var lDef = this._charDefs[lPos];\r\n      if (this._isHiddenHollow(lPos)) continue;\r\n\r\n      if ((!rDef || rDef.type === PatternMask.DEF_TYPES.INPUT && this._isHollow(rPos) && !this._isHiddenHollow(rPos)) &&\r\n        !this._isHollow(lPos)) {\r\n        cursorDefIndex = rPos;\r\n        if (!lDef || lDef.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      }\r\n    }\r\n    this.cursorPos = this._mapDefIndexToPos(cursorDefIndex);\r\n  }\r\n}\r\nPatternMask.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternMask.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternMask.DEFAULT_PLACEHOLDER = {\r\n  show: 'lazy',\r\n  char: '_'\r\n};\r\n","import {isString} from './utils';\r\n\r\nimport BaseMask from './masks/base';\r\nimport RegExpMask from './masks/regexp';\r\nimport FuncMask from './masks/func';\r\nimport PatternMask from './masks/pattern';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n  var mask = IMask.MaskFactory(el, opts);\r\n  mask.bindEvents();\r\n  // refresh\r\n  mask.rawValue = el.value;\r\n  return mask;\r\n}\r\n\r\nIMask.MaskFactory = function (el, opts) {\r\n  var mask = opts.mask;\r\n  if (mask instanceof BaseMask) return mask;\r\n  if (mask instanceof RegExp) return new RegExpMask(el, opts);\r\n  if (mask instanceof Function) return new FuncMask(el, opts);\r\n  if (isString(mask)) return new PatternMask(el, opts);\r\n  return new BaseMask(el, opts);\r\n}\r\nIMask.BaseMask = BaseMask;\r\nIMask.FuncMask = FuncMask;\r\nIMask.RegExpMask = RegExpMask;\r\nIMask.PatternMask = PatternMask;\r\nwindow.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","BaseMask","el","opts","mask","_listeners","_refreshingCount","saveState","bind","processInput","_onDrop","addEventListener","removeEventListener","unbindEvents","length","ev","_oldRawValue","rawValue","_oldUnmaskedValue","unmaskedValue","_oldSelection","selectionStart","cursorPos","details","inputValue","resolve","value","_onChangeState","_fireChangeEvents","_isChanged","fireEvent","_changeState","handler","push","hIndex","indexOf","splice","listeners","forEach","l","preventDefault","stopPropagation","selectionEnd","pos","setSelectionRange","RegExpMask","test","FuncMask","PatternMask","_hollows","placeholder","definitions","DEFINITIONS","_alignCursor","_initialized","_definitions","_charDefs","pattern","unmaskingBlock","optionalBlock","i","ch","type","DEF_TYPES","INPUT","FIXED","unmasking","optional","_buildResolvers","_resolvers","defKey","IMask","MaskFactory","tail","placeholderBuffer","hollows","slice","overflow","ci","di","_mapPosToDefIndex","def","resolver","char","chres","_placeholder","fromPos","input","_isHiddenHollow","_isHollow","defIndex","filter","h","_hollowsBefore","lastHollowIndex","head","inserted","insertSteps","oldSelection","oldValue","startChangePos","Math","min","start","removedCount","max","end","insertedCount","substring","substr","tailInput","_extractInput","_generateInsertSteps","istep","step","_appendTail","tres","thollows","appended","_appendFixedEnd","hasHollows","_appendPlaceholderEnd","isComplete","show","cursorDefIndex","rPos","rDef","lPos","lDef","_mapDefIndexToPos","unmasked","ph","DEFAULT_PLACEHOLDER","map","join","defs","_installDefinitions","_mask","bindEvents","RegExp","Function","window"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkM6L1Byb2plY3RzL2ltYXNranMvc3JjL3V0aWxzLmpzIiwiQzovUHJvamVjdHMvaW1hc2tqcy9zcmMvbWFza3MvYmFzZS5qcyIsIkM6L1Byb2plY3RzL2ltYXNranMvc3JjL21hc2tzL3JlZ2V4cC5qcyIsIkM6L1Byb2plY3RzL2ltYXNranMvc3JjL21hc2tzL2Z1bmMuanMiLCJDOi9Qcm9qZWN0cy9pbWFza2pzL3NyYy9tYXNrcy9wYXR0ZXJuLmpzIiwiQzovUHJvamVjdHMvaW1hc2tqcy9zcmMvaW1hc2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0XHJcbmZ1bmN0aW9uIGlzU3RyaW5nIChzdHIpIHtcclxuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnRcclxuZnVuY3Rpb24gY29uZm9ybSAocmVzLCBzdHIsIGZhbGxiYWNrPScnKSB7XHJcbiAgcmV0dXJuIGlzU3RyaW5nKHJlcykgP1xyXG4gICAgcmVzIDpcclxuICAgIHJlcyA/XHJcbiAgICAgIHN0ciA6XHJcbiAgICAgIGZhbGxiYWNrO1xyXG59XHJcbiIsImltcG9ydCB7Y29uZm9ybX0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIEJhc2VNYXNrIHtcclxuICBjb25zdHJ1Y3RvciAoZWwsIG9wdHMpIHtcclxuICAgIHRoaXMuZWwgPSBlbDtcclxuICAgIHRoaXMubWFzayA9IG9wdHMubWFzaztcclxuXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxuICAgIHRoaXMuX3JlZnJlc2hpbmdDb3VudCA9IDA7XHJcblxyXG4gICAgdGhpcy5zYXZlU3RhdGUgPSB0aGlzLnNhdmVTdGF0ZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5wcm9jZXNzSW5wdXQgPSB0aGlzLnByb2Nlc3NJbnB1dC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fb25Ecm9wID0gdGhpcy5fb25Ecm9wLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBiaW5kRXZlbnRzICgpIHtcclxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuc2F2ZVN0YXRlKTtcclxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLnByb2Nlc3NJbnB1dCk7XHJcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLl9vbkRyb3ApO1xyXG4gIH1cclxuXHJcbiAgdW5iaW5kRXZlbnRzICgpIHtcclxuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuc2F2ZVN0YXRlKTtcclxuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLnByb2Nlc3NJbnB1dCk7XHJcbiAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLl9vbkRyb3ApO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveSAoKSB7XHJcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xyXG4gICAgdGhpcy5fbGlzdGVuZXJzLmxlbmd0aCA9IDA7XHJcbiAgfVxyXG5cclxuICBnZXQgc2VsZWN0aW9uU3RhcnQgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWwuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgfVxyXG5cclxuICBnZXQgY3Vyc29yUG9zICgpIHtcclxuICAgIHJldHVybiB0aGlzLmVsLnNlbGVjdGlvbkVuZDtcclxuICB9XHJcblxyXG4gIHNldCBjdXJzb3JQb3MgKHBvcykge1xyXG4gICAgdGhpcy5lbC5zZXRTZWxlY3Rpb25SYW5nZShwb3MsIHBvcyk7XHJcbiAgfVxyXG5cclxuICBzYXZlU3RhdGUgKGV2KSB7XHJcbiAgICB0aGlzLl9vbGRSYXdWYWx1ZSA9IHRoaXMucmF3VmFsdWU7XHJcbiAgICB0aGlzLl9vbGRVbm1hc2tlZFZhbHVlID0gdGhpcy51bm1hc2tlZFZhbHVlO1xyXG4gICAgdGhpcy5fb2xkU2VsZWN0aW9uID0ge1xyXG4gICAgICBzdGFydDogdGhpcy5zZWxlY3Rpb25TdGFydCxcclxuICAgICAgZW5kOiB0aGlzLmN1cnNvclBvc1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2NoYW5nZVN0YXRlIChkZXRhaWxzKSB7XHJcbiAgICBkZXRhaWxzID0ge1xyXG4gICAgICBjdXJzb3JQb3M6IHRoaXMuY3Vyc29yUG9zLFxyXG4gICAgICBvbGRTZWxlY3Rpb246IHRoaXMuX29sZFNlbGVjdGlvbixcclxuICAgICAgb2xkVmFsdWU6IHRoaXMuX29sZFJhd1ZhbHVlLFxyXG4gICAgICBvbGRVbm1hc2tlZFZhbHVlOiB0aGlzLl9vbGRVbm1hc2tlZFZhbHVlLFxyXG4gICAgICAuLi5kZXRhaWxzXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBpbnB1dFZhbHVlID0gdGhpcy5yYXdWYWx1ZTtcclxuICAgIHZhciByZXMgPSBpbnB1dFZhbHVlO1xyXG4gICAgcmVzID0gY29uZm9ybSh0aGlzLnJlc29sdmUocmVzLCBkZXRhaWxzKSxcclxuICAgICAgcmVzLFxyXG4gICAgICB0aGlzLl9vbGRSYXdWYWx1ZSk7XHJcblxyXG4gICAgaWYgKHJlcyAhPT0gaW5wdXRWYWx1ZSkge1xyXG4gICAgICB0aGlzLmVsLnZhbHVlID0gcmVzO1xyXG4gICAgICB0aGlzLmN1cnNvclBvcyA9IGRldGFpbHMuY3Vyc29yUG9zO1xyXG4gICAgICAvLyBhbHNvIHF1ZXVlIGNoYW5nZSBjdXJzb3IgZm9yIHNvbWUgYnJvd3NlcnNcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmN1cnNvclBvcyA9IGRldGFpbHMuY3Vyc29yUG9zLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9vbkNoYW5nZVN0YXRlKCk7XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIF9vbkNoYW5nZVN0YXRlICgpIHtcclxuICAgIHRoaXMuX2ZpcmVDaGFuZ2VFdmVudHMoKTtcclxuICAgIHRoaXMuc2F2ZVN0YXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgX2lzQ2hhbmdlZCAoKSB7XHJcbiAgICByZXR1cm4gKHRoaXMucmF3VmFsdWUgIT09IHRoaXMuX29sZFJhd1ZhbHVlIHx8XHJcbiAgICAgIHRoaXMudW5tYXNrZWRWYWx1ZSAhPT0gdGhpcy5fb2xkVW5tYXNrZWRWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBfZmlyZUNoYW5nZUV2ZW50cyAoKSB7XHJcbiAgICBpZiAodGhpcy5faXNDaGFuZ2VkKSB0aGlzLmZpcmVFdmVudChcImFjY2VwdFwiKTtcclxuICB9XHJcblxyXG4gIHByb2Nlc3NJbnB1dCAoZXYpIHtcclxuICAgIGlmICghdGhpcy5faXNDaGFuZ2VkKSByZXR1cm47XHJcbiAgICB0aGlzLl9jaGFuZ2VTdGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgb24gKGV2LCBoYW5kbGVyKSB7XHJcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1tldl0pIHRoaXMuX2xpc3RlbmVyc1tldl0gPSBbXTtcclxuICAgIHRoaXMuX2xpc3RlbmVyc1tldl0ucHVzaChoYW5kbGVyKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgb2ZmIChldiwgaGFuZGxlcikge1xyXG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnNbZXZdKSByZXR1cm47XHJcbiAgICBpZiAoIWhhbmRsZXIpIHtcclxuICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldl07XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBoSW5kZXggPSB0aGlzLl9saXN0ZW5lcnNbZXZdLmluZGV4T2YoaGFuZGxlcik7XHJcbiAgICBpZiAoaEluZGV4ID49IDApIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaEluZGV4LCAxKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZmlyZUV2ZW50IChldikge1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldl0gfHwgW107XHJcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChsID0+IGwoKSk7XHJcbiAgfVxyXG5cclxuICAvLyBvdmVycmlkZSB0aGlzXHJcbiAgcmVzb2x2ZSAoc3RyLCBkZXRhaWxzKSB7IHJldHVybiBzdHI7IH1cclxuXHJcbiAgZ2V0IHJhd1ZhbHVlICgpIHtcclxuICAgIHJldHVybiB0aGlzLmVsLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0IHJhd1ZhbHVlIChzdHIpIHtcclxuICAgIHRoaXMuZWwudmFsdWUgPSBzdHI7XHJcbiAgICB0aGlzLl9jaGFuZ2VTdGF0ZSh7XHJcbiAgICAgIGN1cnNvclBvczogc3RyLmxlbmd0aCxcclxuICAgICAgb2xkU2VsZWN0aW9uOiB7XHJcbiAgICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgICAgZW5kOiBzdHIubGVuZ3RoXHJcbiAgICAgIH0sXHJcbiAgICAgIG9sZFZhbHVlOiBzdHJcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHVubWFza2VkVmFsdWUgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmF3VmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXQgdW5tYXNrZWRWYWx1ZSAodmFsdWUpIHtcclxuICAgIHRoaXMucmF3VmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIF9vbkRyb3AgKGV2KSB7XHJcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBCYXNlTWFzayBmcm9tICcuL2Jhc2UnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIFJlZ0V4cE1hc2sgZXh0ZW5kcyBCYXNlTWFzayB7XHJcbiAgcmVzb2x2ZSAoc3RyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXNrLnRlc3Qoc3RyKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJhc2VNYXNrIGZyb20gJy4vYmFzZSc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgRnVuY01hc2sgZXh0ZW5kcyBCYXNlTWFzayB7XHJcbiAgcmVzb2x2ZSAoLi4uYXJncykge1xyXG4gICAgcmV0dXJuIHRoaXMubWFzayguLi5hcmdzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtjb25mb3JtfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCBCYXNlTWFzayBmcm9tICcuL2Jhc2UnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIFBhdHRlcm5NYXNrIGV4dGVuZHMgQmFzZU1hc2sge1xyXG4gIGNvbnN0cnVjdG9yIChlbCwgb3B0cykge1xyXG4gICAgc3VwZXIoZWwsIG9wdHMpO1xyXG5cclxuICAgIHRoaXMuX2hvbGxvd3MgPSBbXTtcclxuICAgIHRoaXMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyO1xyXG4gICAgdGhpcy5kZWZpbml0aW9ucyA9IHtcclxuICAgICAgLi4uUGF0dGVybk1hc2suREVGSU5JVElPTlMsXHJcbiAgICAgIC4uLm9wdHMuZGVmaW5pdGlvbnNcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fYWxpZ25DdXJzb3IgPSB0aGlzLl9hbGlnbkN1cnNvci5iaW5kKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGJpbmRFdmVudHMgKCkge1xyXG4gICAgc3VwZXIuYmluZEV2ZW50cygpO1xyXG4gICAgWydjbGljaycsICdmb2N1cyddLmZvckVhY2goZXYgPT5cclxuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9hbGlnbkN1cnNvcikpO1xyXG4gIH1cclxuXHJcbiAgdW5iaW5kRXZlbnRzICgpIHtcclxuICAgIHN1cGVyLnVuYmluZEV2ZW50cygpO1xyXG4gICAgWydjbGljaycsICdmb2N1cyddLmZvckVhY2goZXYgPT5cclxuICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9hbGlnbkN1cnNvcikpO1xyXG4gIH1cclxuXHJcbiAgX2luc3RhbGxEZWZpbml0aW9ucyAoZGVmaW5pdGlvbnMpIHtcclxuICAgIHRoaXMuX2RlZmluaXRpb25zID0gZGVmaW5pdGlvbnM7XHJcbiAgICB0aGlzLl9jaGFyRGVmcyA9IFtdO1xyXG4gICAgdmFyIHBhdHRlcm4gPSB0aGlzLm1hc2s7XHJcblxyXG4gICAgaWYgKCFwYXR0ZXJuIHx8ICFkZWZpbml0aW9ucykgcmV0dXJuO1xyXG5cclxuICAgIHZhciB1bm1hc2tpbmdCbG9jayA9IGZhbHNlO1xyXG4gICAgdmFyIG9wdGlvbmFsQmxvY2sgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGk9MDsgaTxwYXR0ZXJuLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHZhciBjaCA9IHBhdHRlcm5baV07XHJcbiAgICAgIHZhciB0eXBlID0gIXVubWFza2luZ0Jsb2NrICYmIGNoIGluIGRlZmluaXRpb25zID9cclxuICAgICAgICBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQgOlxyXG4gICAgICAgIFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5GSVhFRDtcclxuICAgICAgdmFyIHVubWFza2luZyA9IHR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCB8fCB1bm1hc2tpbmdCbG9jaztcclxuICAgICAgdmFyIG9wdGlvbmFsID0gdHlwZSA9PT0gUGF0dGVybk1hc2suREVGX1RZUEVTLklOUFVUICYmIG9wdGlvbmFsQmxvY2s7XHJcblxyXG4gICAgICBpZiAoY2ggPT09ICd7JyB8fCBjaCA9PT0gJ30nKSB7XHJcbiAgICAgICAgdW5tYXNraW5nQmxvY2sgPSAhdW5tYXNraW5nQmxvY2s7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjaCA9PT0gJ1snIHx8IGNoID09PSAnXScpIHtcclxuICAgICAgICBvcHRpb25hbEJsb2NrID0gIW9wdGlvbmFsQmxvY2s7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjaCA9PT0gJ1xcXFwnKSB7XHJcbiAgICAgICAgKytpO1xyXG4gICAgICAgIGNoID0gcGF0dGVybltpXTtcclxuICAgICAgICAvLyBUT0RPIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWNoKSBicmVhaztcclxuICAgICAgICB0eXBlID0gUGF0dGVybk1hc2suREVGX1RZUEVTLkZJWEVEO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9jaGFyRGVmcy5wdXNoKHtcclxuICAgICAgICBjaGFyOiBjaCxcclxuICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcclxuICAgICAgICB1bm1hc2tpbmc6IHVubWFza2luZ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9idWlsZFJlc29sdmVycygpO1xyXG4gIH1cclxuXHJcbiAgX2J1aWxkUmVzb2x2ZXJzICgpIHtcclxuICAgIHRoaXMuX3Jlc29sdmVycyA9IHt9O1xyXG4gICAgZm9yICh2YXIgZGVmS2V5IGluIHRoaXMuZGVmaW5pdGlvbnMpIHtcclxuICAgICAgdGhpcy5fcmVzb2x2ZXJzW2RlZktleV0gPSBJTWFzay5NYXNrRmFjdG9yeSh0aGlzLmVsLCB7XHJcbiAgICAgICAgbWFzazogdGhpcy5kZWZpbml0aW9uc1tkZWZLZXldXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2FwcGVuZFRhaWwgKHN0ciwgdGFpbCkge1xyXG4gICAgdmFyIHBsYWNlaG9sZGVyQnVmZmVyID0gJyc7XHJcbiAgICB2YXIgaG9sbG93cyA9IHRoaXMuX2hvbGxvd3Muc2xpY2UoKTtcclxuICAgIHZhciBvdmVyZmxvdyA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAodmFyIGNpPTAsIGRpPXRoaXMuX21hcFBvc1RvRGVmSW5kZXgoc3RyLmxlbmd0aCk7IGNpIDwgdGFpbC5sZW5ndGg7ICsrZGkpIHtcclxuICAgICAgdmFyIGNoID0gdGFpbFtjaV07XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcblxyXG4gICAgICAvLyBmYWlsZWRcclxuICAgICAgaWYgKCFkZWYpIHtcclxuICAgICAgICBvdmVyZmxvdyA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkZWYudHlwZSA9PT0gUGF0dGVybk1hc2suREVGX1RZUEVTLklOUFVUKSB7XHJcbiAgICAgICAgdmFyIHJlc29sdmVyID0gdGhpcy5fcmVzb2x2ZXJzW2RlZi5jaGFyXTtcclxuICAgICAgICB2YXIgY2hyZXMgPSByZXNvbHZlci5yZXNvbHZlKGNoLCBkaSwgc3RyKSB8fCAnJztcclxuICAgICAgICBpZiAoY2hyZXMpIHtcclxuICAgICAgICAgIGNocmVzID0gY29uZm9ybShjaHJlcywgY2gpO1xyXG4gICAgICAgICAgKytjaTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKCFkZWYub3B0aW9uYWwpIGNocmVzID0gdGhpcy5fcGxhY2Vob2xkZXIuY2hhcjtcclxuICAgICAgICAgIGhvbGxvd3MucHVzaChkaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0ciArPSBwbGFjZWhvbGRlckJ1ZmZlciArIGNocmVzO1xyXG4gICAgICAgIHBsYWNlaG9sZGVyQnVmZmVyID0gJyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGxhY2Vob2xkZXJCdWZmZXIgKz0gZGVmLmNoYXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW3N0ciwgaG9sbG93cywgb3ZlcmZsb3ddO1xyXG4gIH1cclxuXHJcbiAgX2V4dHJhY3RJbnB1dCAoc3RyLCBmcm9tUG9zPTApIHtcclxuICAgIHZhciBpbnB1dCA9ICcnO1xyXG5cclxuICAgIGZvciAodmFyIGNpPTAsIGRpPXRoaXMuX21hcFBvc1RvRGVmSW5kZXgoZnJvbVBvcyk7IGNpPHN0ci5sZW5ndGggJiYgZGk8dGhpcy5fY2hhckRlZnMubGVuZ3RoOyArK2RpKSB7XHJcbiAgICAgIHZhciBjaCA9IHN0cltjaV07XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcblxyXG4gICAgICBpZiAodGhpcy5faXNIaWRkZW5Ib2xsb3coZGkpKSBjb250aW51ZTtcclxuXHJcbiAgICAgIGlmIChkZWYudHlwZSA9PT0gUGF0dGVybk1hc2suREVGX1RZUEVTLklOUFVUICYmICF0aGlzLl9pc0hvbGxvdyhkaSkpIGlucHV0ICs9IGNoO1xyXG4gICAgICArK2NpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlucHV0O1xyXG4gIH1cclxuXHJcbiAgX2lzSG9sbG93IChkZWZJbmRleCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hvbGxvd3MuaW5kZXhPZihkZWZJbmRleCkgPj0gMDtcclxuICB9XHJcblxyXG4gIF9pc0hpZGRlbkhvbGxvdyAoZGVmSW5kZXgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0hvbGxvdyhkZWZJbmRleCkgJiZcclxuICAgICAgdGhpcy5fY2hhckRlZnNbZGVmSW5kZXhdICYmIHRoaXMuX2NoYXJEZWZzW2RlZkluZGV4XS5vcHRpb25hbDtcclxuICB9XHJcblxyXG4gIF9ob2xsb3dzQmVmb3JlIChkZWZJbmRleCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hvbGxvd3MuZmlsdGVyKGggPT4gaCA8IGRlZkluZGV4ICYmIHRoaXMuX2lzSGlkZGVuSG9sbG93KGgpKTtcclxuICB9XHJcblxyXG4gIF9tYXBEZWZJbmRleFRvUG9zIChkZWZJbmRleCkge1xyXG4gICAgcmV0dXJuIGRlZkluZGV4IC0gdGhpcy5faG9sbG93c0JlZm9yZShkZWZJbmRleCkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgX21hcFBvc1RvRGVmSW5kZXggKHBvcykge1xyXG4gICAgdmFyIGxhc3RIb2xsb3dJbmRleCA9IHBvcztcclxuICAgIC8vIGV4dGVuZCBjb250aWd1b3VzXHJcbiAgICB3aGlsZSAodGhpcy5faXNIaWRkZW5Ib2xsb3cobGFzdEhvbGxvd0luZGV4LTEpKSArK2xhc3RIb2xsb3dJbmRleDtcclxuXHJcbiAgICByZXR1cm4gcG9zICsgdGhpcy5faG9sbG93c0JlZm9yZShsYXN0SG9sbG93SW5kZXgpLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIF9nZW5lcmF0ZUluc2VydFN0ZXBzIChoZWFkLCBpbnNlcnRlZCkge1xyXG4gICAgdmFyIHJlcyA9IGhlYWQ7XHJcbiAgICB2YXIgaG9sbG93cyA9IHRoaXMuX2hvbGxvd3Muc2xpY2UoKTtcclxuICAgIHZhciBwbGFjZWhvbGRlckJ1ZmZlciA9ICcnO1xyXG4gICAgdmFyIGluc2VydFN0ZXBzID0gW1tyZXMsIGhvbGxvd3Muc2xpY2UoKV1dO1xyXG5cclxuICAgIGZvciAodmFyIGNpPTAsIGRpPXRoaXMuX21hcFBvc1RvRGVmSW5kZXgoaGVhZC5sZW5ndGgpOyBjaTxpbnNlcnRlZC5sZW5ndGg7KSB7XHJcbiAgICAgIHZhciBkZWYgPSB0aGlzLl9jaGFyRGVmc1tkaV07XHJcbiAgICAgIGlmICghZGVmKSBicmVhaztcclxuXHJcbiAgICAgIHZhciBjaCA9IGluc2VydGVkW2NpXTtcclxuICAgICAgaWYgKGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQpIHtcclxuICAgICAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLl9yZXNvbHZlcnNbZGVmLmNoYXJdO1xyXG4gICAgICAgIHZhciBjaHJlcyA9IHJlc29sdmVyLnJlc29sdmUoY2gsIGNpLCByZXMpIHx8ICcnO1xyXG4gICAgICAgIC8vIGlmIG9rIC0gbmV4dCBkaVxyXG4gICAgICAgIGlmIChjaHJlcykge1xyXG4gICAgICAgICAgcmVzICs9IHBsYWNlaG9sZGVyQnVmZmVyICsgY29uZm9ybShjaHJlcywgY2gpOyBwbGFjZWhvbGRlckJ1ZmZlciA9ICcnO1xyXG4gICAgICAgICAgaW5zZXJ0U3RlcHMucHVzaChbcmVzLCBob2xsb3dzLnNsaWNlKCldKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRlZi5vcHRpb25hbCkge1xyXG4gICAgICAgICAgaWYgKGhvbGxvd3MuaW5kZXhPZihkaSkgPCAwKSBob2xsb3dzLnB1c2goZGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hyZXMgfHwgZGVmLm9wdGlvbmFsKSArK2RpO1xyXG4gICAgICAgIGlmIChjaHJlcyB8fCAhZGVmLm9wdGlvbmFsKSArK2NpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBsYWNlaG9sZGVyQnVmZmVyICs9IGRlZi5jaGFyO1xyXG5cclxuICAgICAgICBpZiAoY2ggPT09IGRlZi5jaGFyKSArK2NpO1xyXG4gICAgICAgICsrZGk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5zZXJ0U3RlcHM7XHJcbiAgfVxyXG5cclxuICByZXNvbHZlIChzdHIsIGRldGFpbHMpIHtcclxuICAgIHZhciBjdXJzb3JQb3MgPSBkZXRhaWxzLmN1cnNvclBvcztcclxuICAgIHZhciBvbGRTZWxlY3Rpb24gPSBkZXRhaWxzLm9sZFNlbGVjdGlvbjtcclxuICAgIHZhciBvbGRWYWx1ZSA9IGRldGFpbHMub2xkVmFsdWU7XHJcbiAgICB2YXIgc3RhcnRDaGFuZ2VQb3MgPSBNYXRoLm1pbihjdXJzb3JQb3MsIG9sZFNlbGVjdGlvbi5zdGFydCk7XHJcbiAgICAvLyBNYXRoLm1heCBmb3Igb3Bwb3NpdGUgb3BlcmF0aW9uXHJcbiAgICB2YXIgcmVtb3ZlZENvdW50ID0gTWF0aC5tYXgoKG9sZFNlbGVjdGlvbi5lbmQgLSBzdGFydENoYW5nZVBvcykgfHxcclxuICAgICAgLy8gZm9yIERlbGV0ZVxyXG4gICAgICBvbGRWYWx1ZS5sZW5ndGggLSBzdHIubGVuZ3RoLCAwKTtcclxuICAgIHZhciBpbnNlcnRlZENvdW50ID0gY3Vyc29yUG9zIC0gc3RhcnRDaGFuZ2VQb3M7XHJcblxyXG5cclxuICAgIHZhciBoZWFkID0gc3RyLnN1YnN0cmluZygwLCBzdGFydENoYW5nZVBvcyk7XHJcbiAgICB2YXIgdGFpbCA9IHN0ci5zdWJzdHJpbmcoc3RhcnRDaGFuZ2VQb3MgKyBpbnNlcnRlZENvdW50KTtcclxuICAgIHZhciBpbnNlcnRlZCA9IHN0ci5zdWJzdHIoc3RhcnRDaGFuZ2VQb3MsIGluc2VydGVkQ291bnQpO1xyXG5cclxuICAgIHZhciB0YWlsSW5wdXQgPSB0aGlzLl9leHRyYWN0SW5wdXQodGFpbCwgc3RhcnRDaGFuZ2VQb3MgKyByZW1vdmVkQ291bnQpO1xyXG5cclxuICAgIC8vIHJlbW92ZSBob2xsb3dzIGFmdGVyIGN1cnNvclxyXG4gICAgdmFyIGxhc3RIb2xsb3dJbmRleCA9IHRoaXMuX21hcFBvc1RvRGVmSW5kZXgoc3RhcnRDaGFuZ2VQb3MpO1xyXG4gICAgdGhpcy5faG9sbG93cyA9IHRoaXMuX2hvbGxvd3MuZmlsdGVyKGggPT4gaCA8IGxhc3RIb2xsb3dJbmRleCk7XHJcblxyXG4gICAgdmFyIHJlcyA9IGhlYWQ7XHJcblxyXG4gICAgLy8gaW5zZXJ0IGF2YWlsYWJsZVxyXG4gICAgdmFyIGluc2VydFN0ZXBzID0gdGhpcy5fZ2VuZXJhdGVJbnNlcnRTdGVwcyhoZWFkLCBpbnNlcnRlZCk7XHJcbiAgICBmb3IgKHZhciBpc3RlcD1pbnNlcnRTdGVwcy5sZW5ndGgtMTsgaXN0ZXAgPj0gMDsgLS1pc3RlcCkge1xyXG4gICAgICB2YXIgc3RlcDtcclxuICAgICAgW3N0ZXAsIHRoaXMuX2hvbGxvd3NdID0gaW5zZXJ0U3RlcHNbaXN0ZXBdO1xyXG4gICAgICB2YXIgW3RyZXMsIHRob2xsb3dzLCBvdmVyZmxvd10gPSB0aGlzLl9hcHBlbmRUYWlsKHN0ZXAsIHRhaWxJbnB1dCk7XHJcbiAgICAgIGlmICghb3ZlcmZsb3cpIHtcclxuICAgICAgICBbcmVzLCB0aGlzLl9ob2xsb3dzXSA9IFt0cmVzLCB0aG9sbG93c107XHJcbiAgICAgICAgY3Vyc29yUG9zID0gc3RlcC5sZW5ndGg7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5zZXJ0ZWQpIHtcclxuICAgICAgLy8gYXBwZW5kIGZpeGVkIGF0IGVuZFxyXG4gICAgICB2YXIgYXBwZW5kZWQgPSB0aGlzLl9hcHBlbmRGaXhlZEVuZChyZXMpO1xyXG4gICAgICBjdXJzb3JQb3MgKz0gYXBwZW5kZWQubGVuZ3RoIC0gcmVzLmxlbmd0aDtcclxuICAgICAgcmVzID0gYXBwZW5kZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIGhlYWQgZml4ZWQgYW5kIGhvbGxvd3MgaWYgcmVtb3ZlZCBhdCBlbmRcclxuICAgIGlmICghaW5zZXJ0ZWQgJiYgY3Vyc29yUG9zID09PSByZXMubGVuZ3RoKSB7XHJcbiAgICAgIHZhciBkaSA9IHRoaXMuX21hcFBvc1RvRGVmSW5kZXgoY3Vyc29yUG9zLTEpO1xyXG4gICAgICB2YXIgaGFzSG9sbG93cyA9IGZhbHNlO1xyXG4gICAgICBmb3IgKDsgZGkgPiAwOyAtLWRpKSB7XHJcbiAgICAgICAgdmFyIGRlZiA9IHRoaXMuX2NoYXJEZWZzW2RpXTtcclxuICAgICAgICBpZiAoZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5JTlBVVCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuX2lzSG9sbG93KGRpKSkgaGFzSG9sbG93cyA9IHRydWU7XHJcbiAgICAgICAgICBlbHNlIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoaGFzSG9sbG93cykgcmVzID0gcmVzLnNsaWNlKDAsIGRpICsgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYXBwZW5kIHBsYWNlaG9sZGVyXHJcbiAgICByZXMgPSB0aGlzLl9hcHBlbmRQbGFjZWhvbGRlckVuZChyZXMpO1xyXG4gICAgZGV0YWlscy5jdXJzb3JQb3MgPSBjdXJzb3JQb3M7XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIF9maXJlQ2hhbmdlRXZlbnRzICgpIHtcclxuICAgIC8vIGZpcmUgJ2NvbXBsZXRlJyBhZnRlciAnYWNjZXB0JyBldmVudFxyXG4gICAgc3VwZXIuX2ZpcmVDaGFuZ2VFdmVudHMoKTtcclxuICAgIGlmICh0aGlzLl9pc0NoYW5nZWQgJiYgdGhpcy5pc0NvbXBsZXRlKSB0aGlzLmZpcmVFdmVudChcImNvbXBsZXRlXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzQ29tcGxldGUgKCkge1xyXG4gICAgcmV0dXJuICF0aGlzLl9jaGFyRGVmcy5maWx0ZXIoKGRlZiwgZGkpID0+XHJcbiAgICAgIGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQgJiYgIWRlZi5vcHRpb25hbCAmJlxyXG4gICAgICB0aGlzLl9pc0hvbGxvdyhkaSkpLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIF9hcHBlbmRGaXhlZEVuZCAocmVzKSB7XHJcbiAgICBmb3IgKHZhciBkaT10aGlzLl9tYXBQb3NUb0RlZkluZGV4KHJlcy5sZW5ndGgpOzsgKytkaSkge1xyXG4gICAgICB2YXIgZGVmID0gdGhpcy5fY2hhckRlZnNbZGldO1xyXG4gICAgICBpZiAoIWRlZikgYnJlYWs7XHJcblxyXG4gICAgICBpZiAodGhpcy5faXNIaWRkZW5Ib2xsb3coZGkpKSBjb250aW51ZTtcclxuICAgICAgaWYgKGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQpIGJyZWFrO1xyXG4gICAgICBpZiAoZGkgPj0gcmVzLmxlbmd0aCkgcmVzICs9IGRlZi5jaGFyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIF9hcHBlbmRQbGFjZWhvbGRlckVuZCAocmVzKSB7XHJcbiAgICBmb3IgKHZhciBkaT10aGlzLl9tYXBQb3NUb0RlZkluZGV4KHJlcy5sZW5ndGgpOyBkaTx0aGlzLl9jaGFyRGVmcy5sZW5ndGg7ICsrZGkpIHtcclxuICAgICAgdmFyIGRlZiA9IHRoaXMuX2NoYXJEZWZzW2RpXTtcclxuICAgICAgaWYgKGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQgJiYgIXRoaXMuX2lzSG9sbG93KGRpKSkge1xyXG4gICAgICAgIHRoaXMuX2hvbGxvd3MucHVzaChkaSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuX3BsYWNlaG9sZGVyLnNob3cgPT09ICdhbHdheXMnKSB7XHJcbiAgICAgICAgcmVzICs9IGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuRklYRUQgP1xyXG4gICAgICAgICAgZGVmLmNoYXIgOlxyXG4gICAgICAgICAgIWRlZi5vcHRpb25hbCA/XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLmNoYXIgOlxyXG4gICAgICAgICAgICAnJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGdldCB1bm1hc2tlZFZhbHVlICgpIHtcclxuICAgIHZhciBzdHIgPSB0aGlzLnJhd1ZhbHVlO1xyXG4gICAgdmFyIHVubWFza2VkID0gJyc7XHJcbiAgICBmb3IgKHZhciBjaT0wLCBkaT0wOyBjaTxzdHIubGVuZ3RoICYmIGRpPHRoaXMuX2NoYXJEZWZzLmxlbmd0aDsgKytkaSkge1xyXG4gICAgICB2YXIgY2ggPSBzdHJbY2ldO1xyXG4gICAgICB2YXIgZGVmID0gdGhpcy5fY2hhckRlZnNbZGldO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX2lzSGlkZGVuSG9sbG93KGRpKSkgY29udGludWU7XHJcblxyXG4gICAgICBpZiAoZGVmLnVubWFza2luZyAmJiAhdGhpcy5faXNIb2xsb3coZGkpICYmXHJcbiAgICAgICAgKGRlZi50eXBlID09PSBQYXR0ZXJuTWFzay5ERUZfVFlQRVMuSU5QVVQgJiYgdGhpcy5fcmVzb2x2ZXJzW2RlZi5jaGFyXS5yZXNvbHZlKGNoLCBjaSwgc3RyKSB8fFxyXG4gICAgICAgICAgZGVmLmNoYXIgPT09IGNoKSkge1xyXG4gICAgICAgIHVubWFza2VkICs9IGNoO1xyXG4gICAgICB9XHJcbiAgICAgICsrY2k7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5tYXNrZWQ7XHJcbiAgfVxyXG5cclxuICBzZXQgdW5tYXNrZWRWYWx1ZSAoc3RyKSB7XHJcbiAgICB0aGlzLl9ob2xsb3dzLmxlbmd0aCA9IDA7XHJcbiAgICB2YXIgcmVzO1xyXG4gICAgW3JlcywgdGhpcy5faG9sbG93c10gPSB0aGlzLl9hcHBlbmRUYWlsKCcnLCBzdHIpO1xyXG4gICAgdGhpcy5lbC52YWx1ZSA9IHRoaXMuX2FwcGVuZFBsYWNlaG9sZGVyRW5kKHJlcyk7XHJcblxyXG4gICAgdGhpcy5fb25DaGFuZ2VTdGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHBsYWNlaG9sZGVyICgpIHsgcmV0dXJuIHRoaXMuX3BsYWNlaG9sZGVyOyB9XHJcblxyXG4gIHNldCBwbGFjZWhvbGRlciAocGgpIHtcclxuICAgIHRoaXMuX3BsYWNlaG9sZGVyID0ge1xyXG4gICAgICAuLi5QYXR0ZXJuTWFzay5ERUZBVUxUX1BMQUNFSE9MREVSLFxyXG4gICAgICAuLi5waFxyXG4gICAgfTtcclxuICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkgdGhpcy51bm1hc2tlZFZhbHVlID0gdGhpcy51bm1hc2tlZFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHBsYWNlaG9sZGVyTGFiZWwgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NoYXJEZWZzLm1hcChkZWYgPT5cclxuICAgICAgZGVmLnR5cGUgPT09IFBhdHRlcm5NYXNrLkRFRl9UWVBFUy5GSVhFRCA/XHJcbiAgICAgICAgZGVmLmNoYXIgOlxyXG4gICAgICAgICFkZWYub3B0aW9uYWwgP1xyXG4gICAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIuY2hhciA6XHJcbiAgICAgICAgICAnJykuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBnZXQgZGVmaW5pdGlvbnMgKCkgeyByZXR1cm4gdGhpcy5fZGVmaW5pdGlvbnM7IH1cclxuXHJcbiAgc2V0IGRlZmluaXRpb25zIChkZWZzKSB7XHJcbiAgICB0aGlzLl9pbnN0YWxsRGVmaW5pdGlvbnMoZGVmcyk7XHJcbiAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHRoaXMudW5tYXNrZWRWYWx1ZSA9IHRoaXMudW5tYXNrZWRWYWx1ZTtcclxuICB9XHJcblxyXG4gIGdldCBtYXNrICgpIHsgcmV0dXJuIHRoaXMuX21hc2s7IH1cclxuXHJcbiAgc2V0IG1hc2sgKG1hc2spIHtcclxuICAgIHRoaXMuX21hc2sgPSBtYXNrO1xyXG4gICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB0aGlzLmRlZmluaXRpb25zID0gdGhpcy5kZWZpbml0aW9ucztcclxuICB9XHJcblxyXG4gIF9hbGlnbkN1cnNvciAoKSB7XHJcbiAgICB2YXIgY3Vyc29yRGVmSW5kZXggPSB0aGlzLl9tYXBQb3NUb0RlZkluZGV4KHRoaXMuY3Vyc29yUG9zKTtcclxuICAgIGZvciAodmFyIHJQb3MgPSBjdXJzb3JEZWZJbmRleDsgclBvcyA+PSAwOyAtLXJQb3MpIHtcclxuICAgICAgdmFyIHJEZWYgPSB0aGlzLl9jaGFyRGVmc1tyUG9zXTtcclxuICAgICAgdmFyIGxQb3MgPSByUG9zLTE7XHJcbiAgICAgIHZhciBsRGVmID0gdGhpcy5fY2hhckRlZnNbbFBvc107XHJcbiAgICAgIGlmICh0aGlzLl9pc0hpZGRlbkhvbGxvdyhsUG9zKSkgY29udGludWU7XHJcblxyXG4gICAgICBpZiAoKCFyRGVmIHx8IHJEZWYudHlwZSA9PT0gUGF0dGVybk1hc2suREVGX1RZUEVTLklOUFVUICYmIHRoaXMuX2lzSG9sbG93KHJQb3MpICYmICF0aGlzLl9pc0hpZGRlbkhvbGxvdyhyUG9zKSkgJiZcclxuICAgICAgICAhdGhpcy5faXNIb2xsb3cobFBvcykpIHtcclxuICAgICAgICBjdXJzb3JEZWZJbmRleCA9IHJQb3M7XHJcbiAgICAgICAgaWYgKCFsRGVmIHx8IGxEZWYudHlwZSA9PT0gUGF0dGVybk1hc2suREVGX1RZUEVTLklOUFVUKSBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5jdXJzb3JQb3MgPSB0aGlzLl9tYXBEZWZJbmRleFRvUG9zKGN1cnNvckRlZkluZGV4KTtcclxuICB9XHJcbn1cclxuUGF0dGVybk1hc2suREVGSU5JVElPTlMgPSB7XHJcbiAgJzAnOiAvXFxkLyxcclxuICAnYSc6IC9bXFx1MDA0MS1cXHUwMDVBXFx1MDA2MS1cXHUwMDdBXFx1MDBBQVxcdTAwQjVcXHUwMEJBXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTI3XFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwXFx1MDhBMi1cXHUwOEFDXFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5NzdcXHUwOTc5LVxcdTA5N0ZcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzM1xcdTBDMzUtXFx1MEMzOVxcdTBDM0RcXHUwQzU4XFx1MEM1OVxcdTBDNjBcXHUwQzYxXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDYwXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUNcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUMxLVxcdTE5QzdcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGQ0NcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5N1xcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTc4RVxcdUE3OTAtXFx1QTc5M1xcdUE3QTAtXFx1QTdBQVxcdUE3RjgtXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBODAtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUJDMC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXS8sICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjA3NTA3MFxyXG4gICcqJzogLy4vXHJcbn07XHJcblBhdHRlcm5NYXNrLkRFRl9UWVBFUyA9IHtcclxuICBJTlBVVDogJ2lucHV0JyxcclxuICBGSVhFRDogJ2ZpeGVkJ1xyXG59XHJcblBhdHRlcm5NYXNrLkRFRkFVTFRfUExBQ0VIT0xERVIgPSB7XHJcbiAgc2hvdzogJ2xhenknLFxyXG4gIGNoYXI6ICdfJ1xyXG59O1xyXG4iLCJpbXBvcnQge2lzU3RyaW5nfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmltcG9ydCBCYXNlTWFzayBmcm9tICcuL21hc2tzL2Jhc2UnO1xyXG5pbXBvcnQgUmVnRXhwTWFzayBmcm9tICcuL21hc2tzL3JlZ2V4cCc7XHJcbmltcG9ydCBGdW5jTWFzayBmcm9tICcuL21hc2tzL2Z1bmMnO1xyXG5pbXBvcnQgUGF0dGVybk1hc2sgZnJvbSAnLi9tYXNrcy9wYXR0ZXJuJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdFxyXG5mdW5jdGlvbiBJTWFzayAoZWwsIG9wdHM9e30pIHtcclxuICB2YXIgbWFzayA9IElNYXNrLk1hc2tGYWN0b3J5KGVsLCBvcHRzKTtcclxuICBtYXNrLmJpbmRFdmVudHMoKTtcclxuICAvLyByZWZyZXNoXHJcbiAgbWFzay5yYXdWYWx1ZSA9IGVsLnZhbHVlO1xyXG4gIHJldHVybiBtYXNrO1xyXG59XHJcblxyXG5JTWFzay5NYXNrRmFjdG9yeSA9IGZ1bmN0aW9uIChlbCwgb3B0cykge1xyXG4gIHZhciBtYXNrID0gb3B0cy5tYXNrO1xyXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgQmFzZU1hc2spIHJldHVybiBtYXNrO1xyXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgUmVnRXhwKSByZXR1cm4gbmV3IFJlZ0V4cE1hc2soZWwsIG9wdHMpO1xyXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgRnVuY3Rpb24pIHJldHVybiBuZXcgRnVuY01hc2soZWwsIG9wdHMpO1xyXG4gIGlmIChpc1N0cmluZyhtYXNrKSkgcmV0dXJuIG5ldyBQYXR0ZXJuTWFzayhlbCwgb3B0cyk7XHJcbiAgcmV0dXJuIG5ldyBCYXNlTWFzayhlbCwgb3B0cyk7XHJcbn1cclxuSU1hc2suQmFzZU1hc2sgPSBCYXNlTWFzaztcclxuSU1hc2suRnVuY01hc2sgPSBGdW5jTWFzaztcclxuSU1hc2suUmVnRXhwTWFzayA9IFJlZ0V4cE1hc2s7XHJcbklNYXNrLlBhdHRlcm5NYXNrID0gUGF0dGVybk1hc2s7XHJcbndpbmRvdy5JTWFzayA9IElNYXNrO1xyXG4iXSwibmFtZXMiOlsiaXNTdHJpbmciLCJzdHIiLCJTdHJpbmciLCJjb25mb3JtIiwicmVzIiwiZmFsbGJhY2siLCJCYXNlTWFzayIsImVsIiwib3B0cyIsIm1hc2siLCJfbGlzdGVuZXJzIiwiX3JlZnJlc2hpbmdDb3VudCIsInNhdmVTdGF0ZSIsImJpbmQiLCJwcm9jZXNzSW5wdXQiLCJfb25Ecm9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bmJpbmRFdmVudHMiLCJsZW5ndGgiLCJldiIsIl9vbGRSYXdWYWx1ZSIsInJhd1ZhbHVlIiwiX29sZFVubWFza2VkVmFsdWUiLCJ1bm1hc2tlZFZhbHVlIiwiX29sZFNlbGVjdGlvbiIsInNlbGVjdGlvblN0YXJ0IiwiY3Vyc29yUG9zIiwiZGV0YWlscyIsImlucHV0VmFsdWUiLCJyZXNvbHZlIiwidmFsdWUiLCJfb25DaGFuZ2VTdGF0ZSIsIl9maXJlQ2hhbmdlRXZlbnRzIiwiX2lzQ2hhbmdlZCIsImZpcmVFdmVudCIsIl9jaGFuZ2VTdGF0ZSIsImhhbmRsZXIiLCJwdXNoIiwiaEluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImxpc3RlbmVycyIsImZvckVhY2giLCJsIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZWxlY3Rpb25FbmQiLCJwb3MiLCJzZXRTZWxlY3Rpb25SYW5nZSIsIlJlZ0V4cE1hc2siLCJ0ZXN0IiwiRnVuY01hc2siLCJQYXR0ZXJuTWFzayIsIl9ob2xsb3dzIiwicGxhY2Vob2xkZXIiLCJkZWZpbml0aW9ucyIsIkRFRklOSVRJT05TIiwiX2FsaWduQ3Vyc29yIiwiX2luaXRpYWxpemVkIiwiX2RlZmluaXRpb25zIiwiX2NoYXJEZWZzIiwicGF0dGVybiIsInVubWFza2luZ0Jsb2NrIiwib3B0aW9uYWxCbG9jayIsImkiLCJjaCIsInR5cGUiLCJERUZfVFlQRVMiLCJJTlBVVCIsIkZJWEVEIiwidW5tYXNraW5nIiwib3B0aW9uYWwiLCJfYnVpbGRSZXNvbHZlcnMiLCJfcmVzb2x2ZXJzIiwiZGVmS2V5IiwiSU1hc2siLCJNYXNrRmFjdG9yeSIsInRhaWwiLCJwbGFjZWhvbGRlckJ1ZmZlciIsImhvbGxvd3MiLCJzbGljZSIsIm92ZXJmbG93IiwiY2kiLCJkaSIsIl9tYXBQb3NUb0RlZkluZGV4IiwiZGVmIiwicmVzb2x2ZXIiLCJjaGFyIiwiY2hyZXMiLCJfcGxhY2Vob2xkZXIiLCJmcm9tUG9zIiwiaW5wdXQiLCJfaXNIaWRkZW5Ib2xsb3ciLCJfaXNIb2xsb3ciLCJkZWZJbmRleCIsImZpbHRlciIsImgiLCJfaG9sbG93c0JlZm9yZSIsImxhc3RIb2xsb3dJbmRleCIsImhlYWQiLCJpbnNlcnRlZCIsImluc2VydFN0ZXBzIiwib2xkU2VsZWN0aW9uIiwib2xkVmFsdWUiLCJzdGFydENoYW5nZVBvcyIsIk1hdGgiLCJtaW4iLCJzdGFydCIsInJlbW92ZWRDb3VudCIsIm1heCIsImVuZCIsImluc2VydGVkQ291bnQiLCJzdWJzdHJpbmciLCJzdWJzdHIiLCJ0YWlsSW5wdXQiLCJfZXh0cmFjdElucHV0IiwiX2dlbmVyYXRlSW5zZXJ0U3RlcHMiLCJpc3RlcCIsInN0ZXAiLCJfYXBwZW5kVGFpbCIsInRyZXMiLCJ0aG9sbG93cyIsImFwcGVuZGVkIiwiX2FwcGVuZEZpeGVkRW5kIiwiaGFzSG9sbG93cyIsIl9hcHBlbmRQbGFjZWhvbGRlckVuZCIsImlzQ29tcGxldGUiLCJzaG93IiwiY3Vyc29yRGVmSW5kZXgiLCJyUG9zIiwickRlZiIsImxQb3MiLCJsRGVmIiwiX21hcERlZkluZGV4VG9Qb3MiLCJ1bm1hc2tlZCIsInBoIiwiREVGQVVMVF9QTEFDRUhPTERFUiIsIm1hcCIsImpvaW4iLCJkZWZzIiwiX2luc3RhbGxEZWZpbml0aW9ucyIsIl9tYXNrIiwiYmluZEV2ZW50cyIsIlJlZ0V4cCIsIkZ1bmN0aW9uIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxTQUFTQSxRQUFULENBQW1CQyxHQUFuQixFQUF3QjtTQUNmLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCQSxlQUFlQyxNQUFqRDs7O0FBR0YsQUFDQSxTQUFTQyxPQUFULENBQWtCQyxHQUFsQixFQUF1QkgsR0FBdkIsRUFBeUM7TUFBYkksUUFBYSx1RUFBSixFQUFJOztTQUNoQ0wsU0FBU0ksR0FBVCxJQUNMQSxHQURLLEdBRUxBLE1BQ0VILEdBREYsR0FFRUksUUFKSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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"}